[project]
name = "rich-click"
description = "Format click help output nicely with rich"
readme = "README.md"
license = { file = "LICENSE" }
maintainers = [{ name = "Phil Ewels", email = "phil@ewels.co.uk" }, { name = "Daniel Reeves", email = "xdanielreeves@gmail.com"}]
authors = [{ name = "Phil Ewels", email = "phil@ewels.co.uk" }]
requires-python = ">=3.7"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dynamic = [
    "version",
]
dependencies = [
    "click>=7",
    'importlib-metadata; python_version < "3.8"',
    "rich>=10.7",
    "typing_extensions",
]
[project.optional-dependencies]
dev = [
    "mypy",
    "packaging",
    "pre-commit",
    "pytest",
    "pytest-cov",
    "rich-codex",
    "ruff",
    "types-setuptools",
]
docs = [
    "markdown_include",
    "mkdocs",
    "mkdocs-glightbox",
    "mkdocs-material[imaging]~=9.5.18",
    "mkdocs-material-extensions",
    "mkdocstrings[python]",
    "rich-codex",
]
[project.urls]
Documentation = "https://github.com/ewels/rich-click"
Homepage = "https://github.com/ewels/rich-click"
Issues = "https://github.com/ewels/rich-click/issues"
Repository = "https://github.com/ewels/rich-click"
[project.scripts]
rich-click = "rich_click.cli:main"

[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=45",
]

[tool.setuptools.dynamic]
version = { attr = "rich_click.__version__" }

[tool.black]
line-length = 120
target-version = ['py37']

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "sdist",
    "tests/fixtures/**",
    "examples/**",
    "docs/"
]
ignore = [
    "D100", # Missing docstring in public module
    "D102", # Missing docstring in public method
    "D105", # Missing docstring in magic method
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "E731", # Do not assign a lambda expression, use a def
]
line-length = 120
select = [
    "D",    # pydocstyle
    "E",    # pycodestyle
    "F",    # flake8
    "W",    # pycodestyle
    "I001", # isort
]

[tool.ruff.isort]
# Todo:
#   Add vertical hanging indent when supported.
#   https://github.com/astral-sh/ruff/issues/2600
lines-after-imports = 2
known-first-party = ["rich_click"]

[tool.pyproject-fmt]
indent = 4

[tool.pytest.ini_options]
addopts = "-s -rP -vv --showlocals"
pythonpath = ["tests", "src"]
testpaths = ["tests"]

[tool.mypy]
python_version = "3.8"
scripts_are_modules = true
strict = true
exclude = [
    '.*?live_style_editor\.py$'
]

[tool.pyright]
include = ["src"]
pythonVersion = "3.7"
typeCheckingMode = "basic"
executionEnvironments = [
    { root = "src" },
    { root = "tests", extra_paths = [
        "src",
    ] },
]
