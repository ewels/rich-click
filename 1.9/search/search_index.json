{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rich-click","text":"<p> Richly rendered command line interfaces in click. </p> <p> </p> <p> Documentation\u00a0\u00a0\u00b7\u00a0\u00a0Source Code\u00a0\u00a0\u00b7\u00a0\u00a0Changelog </p> <p>rich-click is a shim around Click that renders help output nicely using Rich.</p> <ul> <li>Click is a \"Python package for creating beautiful command line interfaces\".</li> <li>Rich is a \"Python library for rich text and beautiful formatting in the terminal\".</li> </ul> <p>The intention of <code>rich-click</code> is to provide attractive help output from Click, formatted with Rich, with minimal customization required.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83c\udf08 Rich command-line formatting of click help and error messages</li> <li>\ud83d\ude0c Same API as Click: usage is simply <code>import rich_click as click</code></li> <li>\ud83d\udcab Nice styles by default</li> <li>\ud83d\udcbb CLI tool to run on other people's tools (prefix the command with <code>rich-click</code>)</li> <li>\ud83d\udce6 Export help text as HTML or SVG</li> <li>\ud83c\udf81 Group commands and options into named panels</li> <li>\u274c Well formatted error messages</li> <li>\ud83d\udd22 Easily give custom sort order for options and commands</li> <li>\ud83c\udfa8 Extensive customization of styling and behaviour possible</li> <li>\ud83e\udd16 IDE autocomplete of Click decorators for smooth developer experience.</li> </ul>"},{"location":"#installation","title":"Installation","text":"pipuvRyePoetryPipenvcondaMacPorts <pre><code>pip install rich-click\n</code></pre> <pre><code>uv pip install rich-click\n</code></pre> <pre><code>rye add rich-click\nrye sync\n</code></pre> <pre><code>poetry add rich-click\n</code></pre> <pre><code>pipenv install rich-click\n</code></pre> <pre><code>conda install rich-click\n</code></pre> <p>Note</p> <p>rich-click is available via the conda-forge channel (see docs).</p> <pre><code>sudo port install py-rich-click\n</code></pre> <p>Depreciated</p> <p>This installation method is not officially supported, and is not guaranteed to be up to date.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#simple-example","title":"Simple example","text":"<p>To use rich-click in your code, replace <code>import click</code> with <code>import rich_click as click</code> in your existing click CLI:</p> <pre><code>import rich_click as click\n\n@click.command()\n@click.option(\"--count\", default=1, help=\"Number of greetings.\")\n@click.option(\"--name\", prompt=\"Your name\", help=\"The person to greet.\")\ndef hello(count, name):\n    \"\"\"Simple program that greets NAME for a total of COUNT times.\"\"\"\n    for _ in range(count):\n        click.echo(f\"Hello, {name}!\")\n\nif __name__ == '__main__':\n    hello()\n</code></pre> <p></p>"},{"location":"#more-complex-example","title":"More complex example","text":"<p>rich-click has a ton of customization options that let you compose help text however you'd like. Below is a more complex example of what rich-click is capable of:</p> <p></p>"},{"location":"#usage","title":"Usage","text":"<p>There are a couple of ways to begin using rich-click:</p>"},{"location":"#import-rich_click-as-click","title":"Import <code>rich_click</code> as <code>click</code>","text":"<p>Switch out your normal <code>click</code> import with <code>rich_click</code>, using the same namespace:</p> <pre><code>import rich_click as click\n</code></pre> <p>That's it! \u2728 Then continue to use Click as you would normally.</p> <p>See <code>examples/01_simple.py</code> for an example.</p>"},{"location":"#declarative","title":"Declarative","text":"<p>If you prefer, you can use <code>RichGroup</code> or <code>RichCommand</code> with the <code>cls</code> argument instead. This means that you can continue to use the unmodified <code>click</code> package in parallel.</p> <pre><code>import click\nfrom rich_click import RichCommand\n\n@click.command(cls=RichCommand)\ndef main():\n    \"\"\"My amazing tool does all the things.\"\"\"\n</code></pre> <p>See <code>examples/02_declarative.py</code> for an example.</p>"},{"location":"#rich-click-cli-tool","title":"<code>rich-click</code> CLI tool","text":"<p>rich-click comes with a CLI tool that allows you to format the Click help output from any package that uses Click.</p> <p>To use, prefix <code>rich-click</code> to your normal command. For example, to get richified Click help text from a package called <code>awesometool</code>, you could run:</p> <pre><code>$ rich-click awesometool --help\n\nUsage: awesometool [OPTIONS]\n..more richified output below..\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT license.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-190dev1-wip","title":"Version 1.9.0dev1 (WIP)","text":"<p>Warning</p> <p>Version 1.9.0 deprecates support for a lot of old versions of things:</p> <ul> <li>Python 3.7 support is removed. The minimum supported Python version is 3.8.</li> <li>Click 7 support is removed. The minimum supported Click version is 8.0.</li> <li>Rich 10 and 11 support is removed. The minimum supported Rich version is 12.</li> </ul> <p>Warning</p> <p>Version 1.9.0 introduces a minor breaking change: The <code>DEFAULT_STRING</code>, <code>ENVVAR_STRING</code>, <code>REQUIRED_STRING</code>, and <code>DEPRECATED_STRING</code> config options are now rendered with <code>Text.from_markup</code>. So for example, <code>REQUIRED_STRING = \"[required]\"</code> would be rendered as Rich markup. You must now escape the rich markup: <code>REQUIRED_STRING = \"\\\\[required]\"</code></p> <p>Big changes:</p> <ul> <li>Themes! Check them out with <code>rich-click --themes</code>.</li> <li>RichPanels API introduced. This replaces the \"groups\" feature going forward (although groups will continue to be supported).<ul> <li><code>@click.option_panel()</code></li> <li><code>@click.command_panel()</code></li> </ul> </li> <li>IDE tab completion support for decorators. Now you should no longer need to guess what goes in <code>@click.option()</code> or <code>@click.command(context_settings=...)</code> etc.</li> <li>Help for arguments: <code>help=</code> is now a valid kwarg for <code>@click.argument()</code> decorator. See docs for more information.</li> </ul> <p>Small changes:</p> <ul> <li>\"Deprecated\" text properly handled and stylized in all places.</li> <li>Improved <code>rich-click</code> CLI patching.</li> <li><code>context_settings={\"help_to_stderr\": True}</code> support.</li> <li>Added suite of <code>padding_*</code> config options to control padding.</li> <li>Added newline control in help text with <code>text_paragraph_linebreaks</code> config option.</li> <li>Added a few <code>text_*</code> config options, including notably <code>text_kwargs</code> which can control code styles in Markdown.</li> </ul> <p>Backend (mostly invisible) changes:</p> <ul> <li>Overhauled our test suite to use inline-snapshot! \ud83d\ude01</li> <li>Improved test coverage and CI.</li> <li><code>typing_extensions</code> now only required for &lt; Python 3.11.</li> <li><code>RichHelpFormatter</code> now defers printing by default if a user does not specify a Console. [#231] (With contributions from @ofek)<ul> <li>This more closely aligns the <code>RichHelpFormatter</code> with how base Click works.</li> </ul> </li> <li>Significant refactors to help text rendering.</li> <li>Reintroduced deprecation warnings for a couple of features deprecated in 1.8.</li> <li>There was an issue where the <code>rich.highlighter</code> module could load during CLI execution. We now assert in unit-tests that no <code>rich</code> modules are loaded during code execution, so going forward, <code>rich</code> imports should no longer ever be a side-effect of CLI execution.</li> </ul>"},{"location":"changelog/#version-189-2025-05-19","title":"Version 1.8.9 (2025-05-19)","text":"<p>Click 8.2 support:</p> <ul> <li>Fix deprecation warning in Click 8.2. [#239] (@finsberg)</li> <li>Fix typing incompatibilities with Click 8.2. [#240, #242] (@finsberg)</li> <li>Fixed <code>no_args_is_help=True</code> with Click 8.2: [#241]</li> <li>Added Click 8.2's support for <code>Parameter.deprecated: str | bool</code> [#242]</li> </ul>"},{"location":"changelog/#version-188-2025-03-09","title":"Version 1.8.8 (2025-03-09)","text":"<ul> <li>Make text wrap instead of using ellipses for overflowing metavars in options tables.</li> <li>Added <code>--errors-in-output-format</code> flag to <code>rich-click</code> CLI.</li> <li>Actually fixed regression in stderr handling [#164].</li> </ul>"},{"location":"changelog/#version-187-2025-03-08","title":"Version 1.8.7 (2025-03-08)","text":"<ul> <li>Add ability to turn off option/command deduplication in groups [#226]</li> <li>Fix regression in stderr handling [#164]</li> </ul>"},{"location":"changelog/#version-186-2025-02-19","title":"Version 1.8.6 (2025-02-19)","text":"<ul> <li>Fix incompatibility with click 8.2.0. [#224] (@ppentchev)</li> </ul>"},{"location":"changelog/#version-185-2024-12-01","title":"Version 1.8.5 (2024-12-01)","text":"<ul> <li>Fix issue with error messages not using user-defined styles. [#215] (@sankarngrjn)</li> </ul>"},{"location":"changelog/#version-184-2024-11-12","title":"Version 1.8.4 (2024-11-12)","text":"<ul> <li>Support <code>rich.text.Text()</code> objects for <code>header_text</code>, <code>footer_text</code>, <code>errors_suggestion</code>, and <code>errors_epilogue</code>.</li> </ul>"},{"location":"changelog/#version-183-2023-06-09","title":"Version 1.8.3 (2023-06-09)","text":"<ul> <li>Support <code>{cmd}</code> as an option/command group key when <code>python -m {cmd}</code> is the command_path.</li> <li>Fix yet another deprecation warning issue. (Sorry, sorry.)</li> </ul>"},{"location":"changelog/#version-182-2023-05-14","title":"Version 1.8.2 (2023-05-14)","text":"<ul> <li>Fix another deprecation warning issue.</li> </ul>"},{"location":"changelog/#version-181-2023-05-07","title":"Version 1.8.1 (2023-05-07)","text":"<ul> <li>Fixed bad deprecation warning with <code>highlighter</code></li> <li>Fixed incompatibility with Click 9.</li> </ul>"},{"location":"changelog/#version-180-2023-04-30","title":"Version 1.8.0 (2023-04-30)","text":"<ul> <li>Add <code>--rich-config</code> and <code>--output</code> options to the <code>rich-click</code> CLI.</li> <li>Lazy load Rich to reduce overhead when not rendering help text. [#154]</li> <li>Some internal refactors. These refactors are aimed at making the abstractions more maintainable over time, more consistent, and more adept for advanced used cases.<ul> <li><code>rich_click.py</code> is exclusively the global config; all formatting has been moved to <code>rich_help_rendering.py</code>.</li> <li><code>RichCommand</code> now makes use of methods in the super class: <code>format_usage</code>, <code>format_help_text</code>, <code>format_options</code>, and <code>format_epilog</code>.</li> <li>Global <code>formatter</code> object has been removed from the code.</li> <li><code>highlighter</code> is now constructed by the <code>RichHelpFormatter</code> rather than being inside the config object.</li> </ul> </li> <li>Added <code>RichHelpConfiguration.load_from_globals()</code> classmethod, which pulls all configuration from <code>rich_click.py</code>.</li> <li>Fix bug with regex highlighter for options and switches.</li> <li><code>RichHelpConfiguration()</code> is now asserted to be JSON serializable, as an option for porting configurations. That said, serialization is not a fully supported feature of the high-level API, so serialize the config at your own risk.<ul> <li>Related: <code>highlighter</code> is now deprecated in <code>RichHelpConfiguration</code>; please use <code>highlighter_patterns</code> instead.</li> </ul> </li> <li>Moved exclusively to <code>pyproject.toml</code> and removed <code>setup.py</code> / <code>setup.cfg</code>; thank you @Stealthii!</li> <li>Moved to <code>text_markup: Literal[\"markdown\", \"rich\", \"ansi\", None]</code> instead of booleans.<ul> <li>The default is now <code>ansi</code> instead of <code>None</code> to help support usage of <code>click.style()</code>. <code>None</code> is still supported.</li> </ul> </li> <li>Fixed issue where error messages would not print to <code>stderr</code> by default.</li> <li>New configuration options: [#178]<ul> <li><code>STYLE_OPTIONS_PANEL_BOX</code></li> <li><code>STYLE_COMMANDS_PANEL_BOX</code></li> <li><code>STYLE_ERRORS_PANEL_BOX</code></li> </ul> </li> <li>Many quality of life improvements for command and option groups:<ul> <li>Support both <code>command_path</code> and <code>command.name</code>.</li> <li>Added wildcard (<code>*</code>) option for command groups and option groups, with thanks to @ITProKyle!</li> <li>Resolve duplicates.</li> <li>Better typing for option groups and command groups with <code>TypedDict</code> [#156]</li> <li>Added <code>panel_styles</code> support to groups. [#178]</li> <li>Allow <code>table_styles</code> and <code>panel_styles</code> to be defined for the positional arguments group.</li> </ul> </li> </ul>"},{"location":"changelog/#version-174-2024-03-12","title":"Version 1.7.4 (2024-03-12)","text":"<ul> <li>Fixed <code>legacy_windows</code> default. [#167]</li> </ul>"},{"location":"changelog/#version-173-2024-01-05","title":"Version 1.7.3 (2024-01-05)","text":"<ul> <li>Fix false deprecation warning. [#151]</li> </ul>"},{"location":"changelog/#version-172-2023-12-02","title":"Version 1.7.2 (2023-12-02)","text":"<ul> <li>Add support for rich formatting in epilog text [#146]</li> </ul>"},{"location":"changelog/#version-171-2023-10-31","title":"Version 1.7.1 (2023-10-31)","text":"<ul> <li>Fix bug with <code>rich-click</code> CLI not working with Python 3.12. [#141]</li> <li>Fix compatibility issue with <code>dbt-core</code> CLI. [#140]</li> </ul>"},{"location":"changelog/#version-170-2023-10-11","title":"Version 1.7.0 (2023-10-11)","text":"<p>Warning</p> <p>Click 7.x support is deprecated and will be removed in a future version. Please update to a newer version of click.</p> <p>This release comes after merging a huge pull-request from @BrutalSimplicity - see #92</p> <ul> <li>Extends Click's <code>HelpFormatter</code> class</li> <li>Creates a <code>HelpConfiguration</code> class that doubles the current module-level settings</li> <li>Added a decorator that allows the <code>HelpConfiguration</code> to be passed into Click via the supported <code>context_settings</code> argument provided by the <code>Command</code> and <code>Group</code> classes.</li> <li>The Rich Console object can also be configured per command and is distinct from the Console instance used internally by the formatter. The <code>RichHelpFormatter</code> creates a console based on the <code>RichHelpConfiguration</code> as the tight coupling between the Formatter and Click's internals make it difficult to allow the Console to be configured externally (i.e. one example is that Click expects help formatting to be buffered).</li> <li>Created a <code>RichContext</code> class to allow creation of the custom formatter.</li> <li>The Rich Command, Group, and Context now expose the <code>Console</code> and <code>RichHelpConfiguration</code> properties.</li> <li>Added contributor VSCode settings</li> </ul> <p>This PR closes a number of issues:</p> <ul> <li>#25: Add tests!</li> <li>#90: <code>click.ClickException</code> should output to <code>stderr</code></li> <li>#88: Rich Click breaks contract of Click's <code>format_help</code> and its callers</li> <li>#18: Options inherited from context settings aren't applied</li> </ul> <p>In addition, we merged another large pull-request that adds full static type-checking support (see issue #85), and fixes many bugs - see PR #126.</p> <p>In addition:</p> <ul> <li>Add new style option <code>STYLE_COMMAND</code> [#102]</li> <li>Add new style option <code>WIDTH</code> (in addition to <code>MAX_WIDTH</code>), thanks to @ealap [#110]</li> <li>Add new style option <code>STYLE_ERRORS_SUGGESTION_COMMAND</code> [#136]</li> <li>Updated styling for <code>Usage:</code> line to avoid off-target effects [#108]</li> <li>Click 7.x support has been deprecated. [#117]</li> <li>Fixed error where <code>ctx.exit(exit_code)</code> would not show nonzero exit codes.[#114]</li> <li>Support <code>click.MultiCommand</code>. [#38]:</li> </ul>"},{"location":"changelog/#version-161-2023-01-19","title":"Version 1.6.1 (2023-01-19)","text":"<ul> <li>Don't show metavars for feature switch options [#100] (@likewei92)</li> </ul>"},{"location":"changelog/#version-160-2022-12-05","title":"Version 1.6.0 (2022-12-05)","text":"<ul> <li>\u26a0\ufe0f Removed support for Typer \u26a0\ufe0f<ul> <li>Please use the native Typer functionality instead.</li> </ul> </li> <li>Added self-updating automated readme screengrabs using rich-codex</li> <li>Fix <code>AssertionError</code> when using click command call [#94]</li> </ul>"},{"location":"changelog/#version-152-2022-08-01","title":"Version 1.5.2 (2022-08-01)","text":"<p>Note</p> <p>As of Typer v0.6.0, Typer now supports rich help text natively. Support for Typer in rich-click is now depreciated and will be removed in a future release.</p> <ul> <li>Pin Typer version to <code>&lt;0.6</code></li> <li>Improve support for arguments [#82]<ul> <li>Fixes error with Typer arguments [#59]</li> <li>Adds new style option <code>STYLE_ARGUMENT</code></li> </ul> </li> <li>Don't show env vars if <code>None</code> [#84]</li> <li>Specify <code>__all__</code> for type checkers [#83]</li> </ul>"},{"location":"changelog/#version-151-2022-06-22","title":"Version 1.5.1 (2022-06-22)","text":"<ul> <li>Updated pip release build CI [#78]</li> <li>Added missed occurence of return values when <code>standalone_mode</code> set [#79]</li> </ul>"},{"location":"changelog/#version-150-2022-06-21","title":"Version 1.5.0 (2022-06-21)","text":"<ul> <li>Add new <code>FORCE_TERMINAL</code> config flag to force colours even when help output is piped<ul> <li>Can also be enabled by setting environment variables <code>GITHUB_ACTIONS</code>, <code>FORCE_COLOR</code> or <code>PY_COLORS</code></li> </ul> </li> <li>Add new <code>OPTION_ENVVAR_FIRST</code> config flag to print environment variables before option help texts instead of after (nice for alignment if all options have an env var).</li> <li>Refactor config flag <code>MAX_WIDTH</code> to set the console <code>width</code> and not individual panels<ul> <li>Can now also be set with environment variable <code>TERMINAL_WIDTH</code></li> </ul> </li> <li>Fix package syntax in <code>setup.py</code> for <code>py.typed</code> [#75]</li> <li>Fix printing of return values when <code>standalone_mode</code> set [#76]</li> </ul>"},{"location":"changelog/#version-140-2022-05-17","title":"Version 1.4.0 (2022-05-17)","text":"<ul> <li>Added support for styling the tables that options and commands are displayed in [#69]</li> <li>Fixed <code>AttributeError</code> from <code>envvar</code> code in some Typer usage [#70]</li> </ul>"},{"location":"changelog/#version-132-2022-05-16","title":"Version 1.3.2 (2022-05-16)","text":"<ul> <li>Fix missed indentation issue in subcommand help text with <code>inspect.cleandoc</code> [#67]</li> <li>Add support for showing Click / Typer <code>envvar</code> environment variables [#36]</li> </ul>"},{"location":"changelog/#version-131-2022-05-15","title":"Version 1.3.1 (2022-05-15)","text":"<ul> <li>Bumped minimum version of <code>rich</code> from <code>10</code> to <code>10.7.0</code> (when <code>Group</code> was introduced)</li> <li>Refactored CLI's patching functionality to support <code>from rich_click.cli import patch</code> [#53]</li> <li>Make <code>_make_rich_rext</code> remove text indentations using <code>inspect.cleandoc</code> [#55]</li> <li>Import <code>rich_click</code> into main namespace for Pylance [#64]</li> <li>Add support of new click <code>hidden</code> command parameter [#62]</li> <li>Don't show Typer positional arguments unless <code>SHOW_ARGUMENTS</code> is specified [#59]</li> <li>Fix <code>\\f</code> escape marker for new versions of Click, including in markdown [#60]</li> <li>New config option <code>STYLE_COMMANDS_TABLE_COLUMN_WIDTH_RATIO</code> to fix column widths across groups [#119]</li> </ul>"},{"location":"changelog/#version-130-2022-03-29","title":"Version 1.3.0 (2022-03-29)","text":"<ul> <li>Added initial support for Typer [#26]</li> <li>Mark PEP 561 Compatibility [#41]</li> <li>Distribution now available via MacPorts [#42]</li> <li>Add typing information [#39]</li> <li>Refactor <code>RichCommand</code> and <code>RichGroup</code> out of <code>rich_click</code> [#38]</li> <li>Change metavar overflow to <code>fold</code>, so that large numbers of choices flow onto new lines instead of being truncated with an ellipsis [#33]</li> <li>Make metavar separators dim (<code>[]</code>,<code>&lt;&gt;</code>) (customise with <code>STYLE_METAVAR_SEPARATOR</code>)</li> <li>Add pre-commit config and a lot more linters (iSort, mypy, Flake8) [#40]</li> <li>Monkey-patch <code>RichCommand</code> and <code>RichGroup</code> in CLI code for better <code>rich-click</code> compatibility with more tools [#43]</li> <li>Parse emoji shortcodes <code>:partying_face:</code> [#51]</li> <li>Pushed minimum version of Python up to 3.7, in line with Click v8.1</li> <li>Fixed bug where <code>--no-myflag</code> wasn't showing in the help [#45]</li> </ul>"},{"location":"changelog/#version-121-2022-03-02","title":"Version 1.2.1 (2022-03-02)","text":"<ul> <li>Support the command <code>short_help</code> argument [#28]</li> <li>Added <code>USE_CLICK_SHORT_HELP</code> global to enable default click shortening of help messages [#28]</li> <li>Avoid <code>AttributeError</code> exceptions when using custom exception classes based on click that don't have <code>ctx</code> [#27]</li> <li>Fix bug in inverted secondary options [#31]</li> <li>Refactor printing options to handle arbitrary numbers of flags [#32]</li> </ul>"},{"location":"changelog/#version-120-2022-02-28","title":"Version 1.2.0 (2022-02-28)","text":"<ul> <li>New CLI functionality to richifiy via prefix any other tool using click, by @pawamoy [#13]</li> <li>Distribution now available via conda-forge</li> </ul>"},{"location":"changelog/#version-111-2022-02-28","title":"Version 1.1.1 (2022-02-28)","text":"<p>Hotfix patch release to remove an accidental <code>from turtle import st</code> that crept in due to a pesky VSCode plugin. Many thanks to @ashb for spotting.</p>"},{"location":"changelog/#version-110-2022-02-28","title":"Version 1.1.0 (2022-02-28)","text":"<ul> <li>Added support for <code>HEADER_TEXT</code> and <code>FOOTER_TEXT</code> to go before and after help output</li> <li>Catch Abort exceptions from <code>cmd+c</code> and print nicely using <code>ABORTED_TEXT</code></li> <li>Handle missing <code>click.types._NumberRangeBase</code> in click 7x [#16]</li> <li>Fix compatibility issue for rich 10.6 (<code>group</code> vs <code>render_group</code> import) [#16]</li> <li>Require at least click v7.0 (released 2018) [#16]</li> <li>Require at least rich v10 (released March 2021) [#16]</li> <li>Unwrap single newlines in option and group-command help texts [#23]</li> <li>Add click <code>\\b</code> escape marker functionality into help text rendering [#24]</li> <li>Fix syntax in example in README file by @fridex [#15]</li> </ul>"},{"location":"changelog/#version-100-2022-02-18","title":"Version 1.0.0 (2022-02-18)","text":"<ul> <li>Major change: New usage, so that we can avoid having to do monkey patching [#10.]<ul> <li>Now use with <code>import rich_click as click</code></li> </ul> </li> <li>Add ability to create groups of options with separate panels</li> <li>Show positional arguments in their own panel by default</li> <li>Add config <code>GROUP_ARGUMENTS_OPTIONS</code> option to group with options</li> <li>Improve handing of metavars, give option to show appended instead of in column</li> <li>Add <code>COLOR_SYSTEM</code> option to add ability to disable colours</li> <li>Add options to customise error message help texts</li> <li>Add support for printing errors nicely</li> <li>A lot of additional testing and tweaking</li> </ul>"},{"location":"changelog/#version-030-2022-02-13","title":"Version 0.3.0 (2022-02-13)","text":"<ul> <li>Add ability to create groups of commands with separate panels</li> <li>Add support for rich console markup or Markdown in help texts</li> <li>Set default for <code>MAX_WIDTH</code> to <code>None</code> instead of <code>100</code></li> <li>Switch boolean option <code>SKIP_ARGUMENTS</code> to <code>SHOW_ARGUMENTS</code></li> <li>Improve regular expression for flags like <code>-bg</code></li> <li>Use click's string for default value, instead of the value directly</li> <li>Show some previously missed metavar types (eg. choice and range options)</li> <li>Stripped required-asterisk column from options table if none are required</li> </ul>"},{"location":"changelog/#version-020-2022-02-10","title":"Version 0.2.0 (2022-02-10)","text":"<ul> <li>Made most styling decisions configurable</li> <li>Added support for more click parameters<ul> <li>Showing default values, showing if required, showing if deprecated, epilog</li> <li>Option now hidden if set in click</li> </ul> </li> </ul>"},{"location":"changelog/#version-012-2022-02-10","title":"Version 0.1.2 (2022-02-10)","text":"<ul> <li>Seems to work fine on Python 3.6, so dropped the requirement down to this instead of Python 3.7</li> </ul>"},{"location":"changelog/#version-011-2022-02-10","title":"Version 0.1.1 (2022-02-10)","text":"<ul> <li>Fix a bug in <code>setup.cfg</code> that broke installation</li> </ul>"},{"location":"changelog/#version-010-2022-02-09","title":"Version 0.1.0 (2022-02-09)","text":"<p>Initial development version of <code>rich-click</code>, mostly as a proof of concept.</p> <p>Supports basic generic functionality for printing help from click commands and groups.</p> <p>Code was initially written by @willmcgugan for <code>rich-cli</code> and then further developed by @ewels.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions and suggestions for new features are welcome, as are bug reports! Please create a new issue or better still, dive right in with a pull-request.</p>"},{"location":"contributing/#local-setup","title":"Local setup","text":"<p>Requirements:</p> <ul> <li><code>uv</code> https://docs.astral.sh/uv/getting-started/installation/</li> </ul> <pre><code>uv python pin 3.13\nuv venv .venv\nsource .venv/bin/activate\nuv sync --extra dev\npre-commit install\n</code></pre>"},{"location":"contributing/#pre-commit","title":"Pre-commit","text":"<p>Our pre-commit hooks contain the following hooks:</p> <ul> <li>Prettier: formats our markdown and yaml files nicely.</li> <li>no relative imports: prevents you from using relative imports.</li> <li>iSort: will automatically sort the imports alphabetically.</li> <li>black: will automatically format your code to be according to standardized python format.</li> <li>flake8: will do linting checks to make sure all your code is correctly styled and used.</li> <li>mypy: static type checker which verifies you are not using objects incorrectly.</li> </ul> <p>As mentioned, some of these tools automatically fix your code while other only highlight potential issues. Sometimes it will be enough to try to commit a second time and it will pass, while other times it may require manual changes to your code.</p> <p>In rare cases it may be difficult or undesirable to change to code to pass the linting rules. If this happens, it's ok to add a flake8 <code># noqa</code> or mypy <code># type: ignore</code> comment to skip that line. For details of how to do this, please see the flake8 docs and mypy docs.</p>"},{"location":"contributing/#credits","title":"Credits","text":"<p>This package was written by Phil Ewels (@ewels), based on initial code by Will McGugan (@willmcgugan).</p> <p>rich-click is co-maintained by Daniel Reeves (@dwreeves).</p> <p>Furthermore, these contributors helped make the package what it is today:</p> <ul> <li>@BrutalSimplicity</li> <li>@harens</li> <li>@fridex</li> <li>@pawamoy</li> <li>@jorrick</li> </ul> <p>See the full list of contributors here.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/11/15/pycon-sweden-2024/","title":"PyCon Sweden 2024","text":"<p>I had the great pleasure of presenting rich-click at PyCon Sweden 2024 today. It was my first time attending and a lot of fun!</p> <p>You can find my slides below:</p>"},{"location":"blog/2024/11/15/pycon-sweden-2024/#slides","title":"Slides","text":"<p>Open in new tab \u00a0 </p>"},{"location":"blog/2024/11/15/pycon-sweden-2024/#youtube-video","title":"YouTube video","text":"<p>The talk was recordeed and will be uploaded to YouTube by the conference organisers. As soon as it is available, I will embed it here.</p>"},{"location":"blog/2024/11/15/pycon-sweden-2024/#thanks","title":"Thanks!","text":"<p>Many thanks to the conference organisers for the opportunity! And as mentioned in the talk - many thanks to the contributors who made this project possible.</p>"},{"location":"blog/2024/11/13/three-pre-made-styles/","title":"Three cool pre-made styles for your CLI","text":"<p>rich-click's default style is nice, and naturally it's what most of our users end up using. But we won't be offended if you want to change things up!</p> <p>rich-click is flexible in terms of the custimisation options it gives you. In this blog post, we want to highlight a few neat design ideas for your CLI that you can do with rich-click.</p>"},{"location":"blog/2024/11/13/three-pre-made-styles/#1-simple-boxless-one-color-cli","title":"1. Simple boxless one-color CLI","text":"<p>You may associate rich-click with boxes, but did you know you can strip the box away?</p> <p>Here is an example of a rich-click style that does just that, and produces a nice and clean one-color format:</p> Code for <code>1. Simple boxless one-color CLI</code> <pre><code># /// script\n# dependencies = [\n#   \"rich-click\",\n# ]\n# ///\nimport rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    style_options_panel_box=\"SIMPLE_HEAD\",\n    style_commands_panel_box=\"SIMPLE_HEAD\",\n    style_options_panel_border=\"bold\",\n    options_panel_title=\"[u]Options[/]\",\n    style_commands_panel_border=\"bold\",\n    commands_panel_title=\"[u]Commands[/]\",\n    style_option=\"blue\",\n    style_usage=\"\",\n    style_usage_command=\"\",\n    style_argument=\"blue\",\n    style_switch=\"bold blue\",\n    style_command=\"blue\",\n    style_metavar=\"dim\",\n    text_markup=\"markdown\",\n    max_width=100\n)\n\n@click.group(\"app\")\n@click.option(\"--env-file\", \"-e\", type=click.Path(), help=\".env file\")\n@click.rich_config(help_config=help_config)\ndef cli():\n    \"\"\"\n    CLI for `app`\n\n    This `app` lets you do cool things.\n    \"\"\"\n\n@cli.command(\"db\")\ndef deploy():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"self\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p>"},{"location":"blog/2024/11/13/three-pre-made-styles/#2-dark-mode-light-mode-aware-with-three-colors","title":"2. Dark mode / light mode aware with three colors","text":"<p>For now, neither Rich nor rich-click has a concept of dark mode or light mode. However, there are third party packages that can detect the background color of most terminals. Checking the terminal bg makes using RGB hex values much easier.</p> <p>Here is an example of such a tool you can use:</p> pipuvRye <pre><code>pip install term-background\n</code></pre> <pre><code>uv add term-background\n</code></pre> <pre><code>rye add term-background\nrye sync\n</code></pre> <p>The following example looks great in both dark and light terminals!</p> Code for <code>2. Dark mode / light mode aware with three colors</code> <pre><code># /// script\n# dependencies = [\n#   \"rich-click\",\n#   \"term-background\",\n# ]\n# ///\n\nimport rich_click as click\nfrom term_background import is_dark_background\n\nif is_dark_background():\n    primary_color = \"#99bbf2\"\n    secondary_color = \"#c099f2\"\n    tertiary_color = \"#d1d43d\"\nelse:\n    primary_color = \"#2b569c\"\n    secondary_color = \"#5c2b9c\"\n    tertiary_color = \"#c4b74f\"\n\n\nhelp_config = click.RichHelpConfiguration(\n    style_option=f\"bold {secondary_color}\",\n    style_argument=f\"bold {tertiary_color}\",\n    style_command=f\"bold {primary_color}\",\n    style_switch=f\"bold {secondary_color}\",\n    style_metavar=tertiary_color,\n    style_metavar_separator=\"\",\n    style_usage=f\"bold {primary_color}\",\n    style_usage_command=\"\",\n    style_helptext_first_line=\"bold\",\n    style_helptext=\"\",\n    style_option_default=tertiary_color,\n    style_required_short=\"bold red\",\n    style_required_long=\"red\",\n    style_options_panel_border=f\"dim {secondary_color}\",\n    style_commands_panel_border=f\"dim {primary_color}\",\n    text_markup=\"markdown\",\n    max_width=120\n)\n\n\n@click.group(\"app\")\n@click.option(\"--env-file\", \"-e\", type=click.Path(), help=\".env file\")\n@click.rich_config(help_config=help_config)\ndef cli():\n    \"\"\"\n    CLI for `app`\n\n    This `app` lets you do cool things.\n    \"\"\"\n\n@cli.command(\"db\")\ndef deploy():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"self\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> Dark modeLight mode <p></p> <p></p>"},{"location":"blog/2024/11/13/three-pre-made-styles/#3-gradient-art-header","title":"3. Gradient art header","text":"<p>The following example combines ideas from the first two examples, and then adds in <code>text2art</code> from the <code>art</code> package with <code>Gradient</code> from the <code>rich-gradient</code> package.</p> <p>The below example requires <code>rich-click&gt;=1.8.4</code>, as previous versions do not support <code>Gradient()</code> objects for the <code>header_text</code>.</p> pipuvRye <pre><code>pip install term-background art rich-gradient\n</code></pre> <pre><code>uv add term-background art rich-gradient\n</code></pre> <pre><code>rye add term-background\nrye add art\nrye add rich-gradient\nrye sync\n</code></pre> Code for <code>3. Gradient art header</code> <pre><code># /// script\n# dependencies = [\n#   \"rich-click&gt;=1.8.4\",\n#   \"term-background\",\n#   \"art\",\n#   \"rich-gradient\",\n# ]\n# ///\nimport rich_click as click\nfrom art import text2art\nfrom rich_gradient import Gradient\nfrom term_background import is_dark_background\n\n\nif is_dark_background():\n    primary_color = \"#99ff00\"\n    secondary_color = \"#ffdd00\"\nelse:\n    primary_color = \"#77bb22\"\n    secondary_color = \"#aa9922\"\n\n\nhelp_config = click.RichHelpConfiguration(\n    style_options_panel_box=\"SIMPLE\",\n    style_commands_panel_box=\"SIMPLE\",\n    style_option=f\"bold {secondary_color}\",\n    style_argument=secondary_color,\n    style_command=primary_color,\n    options_panel_title=\"[u]Options[/]\",\n    commands_panel_title=\"[u]Commands[/]\",\n    style_switch=secondary_color,\n    style_metavar=\"bold\",\n    header_text=Gradient(text2art(\"My App\"), colors=[primary_color, secondary_color]),\n    style_metavar_separator=\"\",\n    style_usage=f\"bold {primary_color}\",\n    style_usage_command=\"\",\n    style_helptext_first_line=\"bold\",\n    style_helptext=\"\",\n    style_option_default=\"\",\n    style_required_short=\"bold\",\n    style_required_long=\"\",\n    style_options_panel_border=f\"bold {secondary_color}\",\n    style_commands_panel_border=f\"bold {primary_color}\",\n    text_markup=\"markdown\",\n    max_width=120\n)\n\n\n@click.group(\"app\")\n@click.option(\"--env-file\", \"-e\", type=click.Path(), help=\".env file\")\n@click.rich_config(help_config=help_config)\ndef cli():\n    \"\"\"\n    CLI for `app`\n\n    This `app` lets you do cool things.\n    \"\"\"\n\n@cli.command(\"db\")\ndef deploy():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"self\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p>"},{"location":"blog/2024/11/13/three-pre-made-styles/#parting-notes","title":"Parting notes","text":"<p>Thank you for reading, and I hope you find this blog helpful and inspiring.</p> <p>Phil and I have been really busy on a bunch of other things, but we haven't forgotten about our roadmap for rich-click 1.9. We hope to get <code>1.9.0</code> released by the middle of 2025. Stay tuned for more updates!</p> <p>Lastly, if you are attending PyCon Sweden on November 14-15, 2024, be sure to check out Phil Ewels' talk about rich-click.</p>"},{"location":"blog/2024/04/30/version-1.8/","title":"New blog + v1.8 released!","text":"<p>Today we are very happy to release version 1.8 of rich-click, and along with it - this blog!</p>"},{"location":"blog/2024/04/30/version-1.8/#new-docs-website-and-blog","title":"New docs website and blog","text":"<p>Until now, rich-click has just had a GitHub repo and all documentation has been in the README. Now, we have full docs! We've fleshed out the documentation from the README, and we'll continue to add to it over time.</p>"},{"location":"blog/2024/04/30/version-1.8/#live-style-editor","title":"Live Style Editor","text":"<p>The coolest addition allowed by this change to full documentation is the Live Style Editor.</p> <p>We built this to address a problem we noticed, which is that the vast majority of users rely on the default rich-click styles. Although we do think rich-click's defaults are pretty good, it pointed to a potential developer experience issue that so many CLIs relied on the defaults. We hope that the live style editor makes it easier for users to make style changes and to personalize their CLIs. \ud83d\ude01</p> <p>Here is an example of a style that Phil made with the style editor:</p> Phil's Generated Code <pre><code>import rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    style_option=\"bold cyan\",\n    style_argument=\"bold cyan\",\n    style_command=\"bold green\",\n    style_switch=\"bold green\",\n    style_metavar=\"green\",\n    style_metavar_separator=\"dim blue\",\n    style_usage=\"bold italic magenta\",\n    style_usage_command=\"bold yellow\",\n    style_helptext_first_line=\"bold italic white\",\n    style_helptext=\"dim italic yellow\",\n    style_option_default=\"bold yellow\",\n    style_required_short=\"bold red\",\n    style_required_long=\"bold red\",\n    style_options_panel_border=\"italic blue\",\n    style_commands_panel_border=\"italic blue\"\n)\n\n@click.group(\"my-command\")\n@click.argument(\"foo\")\n@click.option(\"--bar\", \"-b\", help=\"Lorem ipsum\", show_default=\"someval\")\n@click.option(\"--baz\", required=True, help=\"Choose wisely\", type=click.Choice([\"a\", \"b\", \"c\"]))\n@click.rich_config(help_config=help_config)\ndef cli(foo, bar):\n    \"\"\"\n    Help text for CLI\n\n    Second line of help text.\n    \"\"\"\n\n@cli.command(\"subcommand\")\ndef subcommand(foo, bar):\n    \"\"\"Help text for subcommand\"\"\"\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p> <p>And here's one that Daniel made:</p> Daniel's Generated Code <pre><code>import rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    style_option=\"bold magenta\",\n    style_argument=\"bold yellow\",\n    style_command=\"bold blue\",\n    style_switch=\"bold magenta\",\n    style_metavar=\"yellow\",\n    style_metavar_separator=\"\",\n    style_usage=\"bold blue\",\n    style_usage_command=\"\",\n    style_helptext_first_line=\"bold\",\n    style_helptext=\"\",\n    style_option_default=\"yellow\",\n    style_required_short=\"bold red\",\n    style_required_long=\"red\",\n    style_options_panel_border=\"magenta\",\n    style_commands_panel_border=\"blue\"\n)\n\n@click.group(\"my-command\")\n@click.argument(\"foo\")\n@click.option(\"--bar\", \"-b\", help=\"Lorem ipsum\", show_default=\"someval\")\n@click.option(\"--baz\", required=True, help=\"Choose wisely\", type=click.Choice([\"a\", \"b\", \"c\"]))\n@click.rich_config(help_config=help_config)\ndef cli(foo, bar):\n    \"\"\"\n    Help text for CLI\n\n    Second line of help text.\n    \"\"\"\n\n@cli.command(\"subcommand\")\ndef subcommand(foo, bar):\n    \"\"\"Help text for subcommand\"\"\"\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p>"},{"location":"blog/2024/04/30/version-1.8/#rich-click-version-18","title":"rich-click version 1.8","text":""},{"location":"blog/2024/04/30/version-1.8/#generate-html-and-svg-with-the-rich-click-cli","title":"Generate HTML and SVG with the <code>rich-click</code> CLI","text":"<p>The <code>rich-click</code> CLI now allows for <code>--output svg</code> and <code>--output html</code> to help easily generate outputs for READMEs and docs:</p> <pre><code>rich-click --output svg path.to.my.cli:main --help\n</code></pre> <p></p>"},{"location":"blog/2024/04/30/version-1.8/#easier-decorator-api","title":"Easier decorator API","text":"<p>The <code>rich_config()</code> decorator API is now easier to use: You can pass a <code>dict</code> into the <code>@click.rich_config()</code> decorator. E.g.:</p> <pre><code>@click.command\n@click.rich_config(help_config={\"max_width\": 100})\ndef my_command():\n    ...\n</code></pre> <p>Additionally, <code>dict</code>s behave a little differently than <code>RichHelpConfiguration</code> when dealing with parents, and this behavior can be useful in some contexts. Basically, the child command uses the parent's help config as a baseline, and only updates the fields specified in the dict. So in the following example, <code>my_group</code> will have <code>style_option=\"red\"</code>, and <code>my_subcommand</code> will have both <code>style_option=\"red\"</code> and <code>style_argument=\"green\"</code>.</p> <pre><code>@click.group\n@click.rich_config(help_config={\"style_option\": \"red\"})\ndef my_group():\n    ...\n\n@my_group.command\n@click.rich_config(help_config={\"style_argument\": \"green\"})\ndef my_subcommand():\n    ...\n</code></pre> <p>This can be a little confusing, so we've defined explicit rules (and enforced them in unit tests) for how the config is resolved (these are also in our docs):</p> <pre><code>flowchart TD\n    A[\"Did you pass in a @rich_config(help_config=...)?\"]\n    A --&gt; |Yes| Ayes\n    A --&gt; |No| Ano\n\n    Ayes[\"Was it a dict or a RichHelpConfiguration?\"]\n\n    Ayes --&gt; |dict| AyesBdict\n    Ayes --&gt; |RichHelpConfiguration| AyesBrhc\n\n    AyesBdict[\"Is there a 'parent' config?\"]\n\n    AyesBdict --&gt; |Yes| AyesBdictCyes\n    AyesBdict --&gt; |No| AyesBdictCno\n\n    AyesBdictCyes:::StoppingPoint\n    AyesBdictCyes[\"Merge into the parent config,\\nand use that\"]\n\n    AyesBdictCno:::StoppingPoint\n    AyesBdictCno[\"Merge into the global config,\\nand use that\"]\n\n    AyesBrhc:::StoppingPoint\n    AyesBrhc[\"Use the RichHelpConfiguration  object.\\n\\n(Note: RichHelpConfiguration's\\ndefaults are independent of the\\nglobal config.)\"]\n\n    Ano[\"Is there a 'parent' config?\"]\n\n    Ano --&gt; |Yes| AnoByes\n    Ano --&gt; |No| AnoBno\n\n    AnoByes:::StoppingPoint\n    AnoByes[\"Use the parent config\"]\n\n    AnoBno:::StoppingPoint\n    AnoBno[\"Use the global config\"]\n\n    classDef StoppingPoint font-weight: 600;</code></pre>"},{"location":"blog/2024/04/30/version-1.8/#more-style-options","title":"More style options","text":"<p>The biggest addition to rich-click's styling options was control over panel styles:</p> <ul> <li><code>STYLE_OPTIONS_PANEL_BOX</code></li> <li><code>STYLE_COMMANDS_PANEL_BOX</code></li> <li><code>STYLE_ERRORS_PANEL_BOX</code></li> </ul> <p>Here's a silly example of what this can do:</p> Code for silly example <pre><code>import rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    style_options_panel_box=\"ASCII\",\n    style_commands_panel_box=\"HEAVY\",\n)\n\n@click.group(\"app\")\n@click.option(\"--env-file\", \"-e\", type=click.Path(), help=\".env file\")\n@click.rich_config(help_config=help_config)\ndef cli():\n    \"\"\"\n    CLI for `app`\n\n    This `app` lets you do cool things.\n    \"\"\"\n\n@cli.command(\"db\")\ndef deploy():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"self\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p> <p>Here's a simple, stylish, and sleek example that would look great in your app:</p> Code for stylish example <pre><code>import rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    style_options_panel_box=\"SIMPLE_HEAD\",\n    style_options_table_box=\"SIMPLE_HEAD\",\n    style_commands_panel_box=\"SIMPLE_HEAD\",\n    style_commands_table_box=\"SIMPLE_HEAD\",\n    style_options_panel_border=\"bold\",\n    options_panel_title=\"[u]Options[/]\",\n    use_rich_markup=True,\n    style_commands_panel_border=\"bold\",\n    commands_panel_title=\"[u]Commands[/]\",\n    style_option=\"green\",\n    style_usage=\"\",\n    style_usage_command=\"\",\n    style_argument=\"green\",\n    style_switch=\"dim green\",\n    style_command=\"green\",\n    style_metavar=\"dim\",\n)\n\n@click.group(\"app\")\n@click.option(\"--env-file\", \"-e\", type=click.Path(), help=\".env file\")\n@click.rich_config(help_config=help_config)\ndef cli():\n    \"\"\"\n    CLI for `app`\n\n    This `app` lets you do cool things.\n    \"\"\"\n\n@cli.command(\"db\")\ndef deploy():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"self\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p>"},{"location":"blog/2024/04/30/version-1.8/#improvements-to-option-and-command-group-api","title":"Improvements to option and command group API","text":"<p>The option groups and command groups are a very powerful and useful feature, but historically they've been tricky to work with. The changes we've made in 1.8 improve on the API in a few substantial ways.</p>"},{"location":"blog/2024/04/30/version-1.8/#better-command-path-resolution","title":"Better command path resolution","text":"<p>First, group keys used to only read from the <code>ctx.command_path</code>. Now they read from the <code>ctx.command_path</code> and the <code>ctx.command.name</code> (or the <code>f\"{ctx.parent.command.name} {ctx.command.name}\"</code> for subcommands). This should cause fewer headaches for users!</p> Longer explanation <p>What this means in practical terms is easier to explain by example. For example, the command path for <code>python hello.py --name world</code> is <code>hello.py</code>, but if you were to set <code>hello</code> as a console script entry point in your <code>pyproject.toml</code> or <code>setup.py</code>, then the command path for <code>hello --name world</code> would become <code>hello</code>.</p> <p>This causes an annoying issue where running <code>python my_script.py</code> and <code>venv/bin/my_script</code> had different behaviors, and it was also unintuitive that the name of the CLI didn't always work, even when it's not an entry point.</p> <p>Now, both approaches work! \ud83d\ude0a</p> <pre><code># cli.py\nimport rich_click as click\n\n# Pick your poison \ud83e\uddea Both approaches now work!\nclick.rich_click.COMMAND_GROUPS = {\n    \"super-cool-tool\": [...],  # `ctx.command.name`\n    \"cli.py\": [...]  # `ctx.command_path` when running \"python cli.py\".\n}\n\n@click.command(\"super-cool-tool\")\ndef main():\n    ...\n</code></pre>"},{"location":"blog/2024/04/30/version-1.8/#wildcards","title":"Wildcards","text":"<p>Wildcards now also work, in case you want to globally define options or simply don't want to bother spelling out the whole command path.</p> <pre><code>import rich_click as click\n\nclick.rich_click.COMMAND_GROUPS = {\n    \"*\": [...],\n}\n\n@click.command(\"super-cool-tool\")\ndef main():\n    ...\n</code></pre> <p>You can also stick wildcards in the front, middle, or end of a key, e.g.:</p> <ul> <li><code>cli sub-command *</code></li> <li><code>cli * sub-sub-command</code></li> <li><code>* sub-command *</code></li> </ul> Long example <pre><code># foo.py\nimport rich_click as click\n\nclick.rich_click.OPTION_GROUPS = {\n    \"cli * c\": [\n        {\n            \"name\": \"foo\",\n            \"options\": [\"--flag1\"]\n        }\n    ]\n}\n\n@click.group\ndef cli(): ...\n\n@cli.group(\"x\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef x(flag1, flag2): ...\n@x.command(\"a\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef xa(flag1, flag2): ...\n@x.command(\"b\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef xb(flag1, flag2): ...\n@x.command(\"c\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef xc(flag1, flag2): ...\n\n@cli.group(\"y\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef y(flag1, flag2): ...\n@y.command(\"a\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef ya(flag1, flag2): ...\n@y.command(\"b\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef yb(flag1, flag2): ...\n@y.command(\"c\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef yc(flag1, flag2): ...\n\n@cli.group(\"z\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef z(flag1, flag2): ...\n@z.command(\"a\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef za(flag1, flag2): ...\n@z.command(\"b\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef zb(flag1, flag2): ...\n@z.command(\"c\")\n@click.option(\"--flag1\")\n@click.option(\"--flag2\")\ndef zc(flag1, flag2): ...\n\ncli()\n</code></pre> <p>This works the way you'd expect:</p> <pre><code>$ python foo.py x c --help\n\n Usage: foo.py x c [OPTIONS]                                                          \n\n\u256d\u2500 foo \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --flag1    TEXT                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --flag2    TEXT                                                                    \u2502\n\u2502 --help           Show this message and exit.                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\n$ python foo.py x b --help\n\n Usage: foo.py x b [OPTIONS]                                                           \n\n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --flag1    TEXT                                                                     \u2502\n\u2502 --flag2    TEXT                                                                     \u2502\n\u2502 --help           Show this message and exit.                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"blog/2024/04/30/version-1.8/#panel_styles-arguments-panel-styling","title":"<code>panel_styles</code> + Arguments panel styling","text":"<p>The dicts for command+option groups now accept an optional <code>panel_styles</code> key, which passes kwargs to the <code>Panel()</code>.</p> <p>Another handy feature is that the \"Arguments\" panel (which is created when the config option <code>show_arguments</code> is <code>True</code>) can now be stylized through the API so long as the following is true:</p> <ol> <li><code>config.show_arguments</code> is <code>True</code>.</li> <li>There is an option group with a <code>name</code> equal to the <code>config.arguments_panel_title</code> (default: <code>'Arguments'</code>)</li> <li>The option group does not have any <code>options</code> (The list is empty, undefined, or <code>None</code>).</li> </ol> <p>Example:</p> <pre><code>import rich_click as click\nfrom rich import box\n\nhelp_config = click.RichHelpConfiguration(\n    show_arguments=True,\n    option_groups={\n        \"my-command\": [\n            {\n                \"name\": \"Arguments\",\n                \"panel_styles\": {\"box\": box.DOUBLE_EDGE, \"border_style\": \"dim red\"}\n            }\n        ]\n    }\n)\n\n@click.command(\"my-command\")\n@click.argument(\"foo\")\n@click.argument(\"bar\")\n@click.option(\"--baz\")\n@click.rich_config(help_config=help_config)\ndef cli(foo, bar, baz):\n    ...\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> <p></p>"},{"location":"blog/2024/04/30/version-1.8/#improved-performance","title":"Improved performance","text":"<p>During command execution, rich-click now loads faster and takes up less memory than before:</p> <p></p> <p></p> <p>Info</p> <p>Python regularly compiles <code>.py</code> files into <code>.pyc</code> files to speed up code execution. The with bytecode metrics measure performance with these <code>.pyc</code> files, and the without bytecode metrics measure performance without them.</p> <p>We include the code we ran below. The metrics you see above were gathered by running the below script on an old Macbook.</p> Profiling script <p>This is the script we used to generate the data in the bar chart.</p> <p>This script requires <code>uv</code> and <code>gdate</code>.</p> <pre><code>#!/bin/bash\nset -eo pipefail\n\nexport VIRTUAL_ENV=.venv_benchmarks\nexport PY_VERSION=3.12\n\nspeed_trials=40\nmprof_trials=10\n\n###############################################################################\n\nuv venv \"${VIRTUAL_ENV}\" --python \"${PY_VERSION}\"\n\ncat &lt;&lt;EOF &gt; hello_click.py\nimport click\n\n@click.command()\n@click.option(\"--name\", default=\"World\", help=\"Name to greet.\")\ndef hello(name):\n    \"\"\"Greet someone.\"\"\"\n    print(f\"Hello, {name}!\")\n    if name == \"Daniel\":\n        import time\n        time.sleep(0.2)\n\nif __name__ == \"__main__\":\n    hello()\nEOF\n\ncat &lt;&lt;EOF &gt; hello_rich_click.py\nimport rich_click as click\n\n@click.command()\n@click.option(\"--name\", default=\"World\", help=\"Name to greet.\")\ndef hello(name):\n    \"\"\"Greet someone.\"\"\"\n    print(f\"Hello, {name}!\")\n    if name == \"Daniel\":\n        import time\n        time.sleep(0.2)\n\nif __name__ == \"__main__\":\n    hello()\nEOF\n\ncat &lt;&lt;EOF &gt; hello_argparse.py\nimport argparse\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Greet someone.\")\n    parser.add_argument(\"--name\", default=\"World\", help=\"Name to greet.\")\n    args = parser.parse_args()\n    print(f\"Hello, {args.name}!\")\n    if args.name == \"Daniel\":\n        import time\n        time.sleep(0.2)\n\nif __name__ == '__main__':\n    main()\nEOF\n\ncat &lt;&lt;EOF &gt; hello_typer.py\nimport typer\nfrom typing_extensions import Annotated\n\ndef main(name: Annotated[str, typer.Option(help=\"Name to greet.\")] = \"World\"):\n    \"\"\"Greet someone.\"\"\"\n    print(f\"Hello, {name}!\")\n    if name == \"Daniel\":\n        import time\n        time.sleep(0.3)\n\nif __name__ == '__main__':\n    main()\nEOF\n\nchmod +x hello_argparse.py\nchmod +x hello_click.py\nchmod +x hello_rich_click.py\nchmod +x hello_typer.py\n\n################################################################################\n\nfunction get_times {\n  total_time=0\n  filename=\"${1}\"\n  clear_pyc_files=\"${2}\"\n\n  # Run once to compile pyc files\n  \"${VIRTUAL_ENV}/bin/python\" \"${filename}\" --name Phil &gt;/dev/null\n\n  for (( i=0; i &lt; speed_trials; i++ ))\n  do\n\n    if [ \"${clear_pyc_files}\" = \"true\" ]; then\n      find \"${VIRTUAL_ENV}/lib/python${PY_VERSION}/site-packages/\" -name '*.pyc' -delete\n    fi\n\n    start_time=$(gdate +%s.%N)\n    \"${VIRTUAL_ENV}/bin/python\" \"${filename}\" --name Phil &gt;/dev/null\n    end_time=$(gdate +%s.%N)\n\n    elapsed=$(echo \"$end_time - $start_time\" | bc)\n    total_time=$(echo \"$total_time + $elapsed\" | bc)\n\n  done\n\n  average_time=$(echo \"$total_time / $speed_trials\" | bc -l)\n  echo \"Average time for ${filename} with clear_pyc_files=${clear_pyc_files}: $average_time seconds\"\n\n}\n\nfunction get_mprof {\n  total_mib=0\n  filename=\"${1}\"\n  clear_pyc_files=\"${2}\"\n\n  # Run once to compile pyc files\n  \"${VIRTUAL_ENV}/bin/python\" \"${filename}\" --name Phil &gt;/dev/null\n\n  for (( i=0; i &lt; mprof_trials; i++ ))\n  do\n\n    if [ \"${clear_pyc_files}\" = \"true\" ]; then\n      find \"${VIRTUAL_ENV}/lib/python${PY_VERSION}/site-packages/\" -name '*.pyc' -delete\n    fi\n\n    \"${VIRTUAL_ENV}/bin/mprof\" run \"${VIRTUAL_ENV}/bin/python\" \"${filename}\" --name Daniel &gt;/dev/null\n    output=$(\"${VIRTUAL_ENV}/bin/mprof\" peak)\n    mprof_file=$(echo \"$output\" | grep 'mprofile' | awk '{print $1}')\n    memory_usage=$(echo \"$output\" | grep 'mprofile' | awk '{print $2}' | bc)\n    total_time=$(echo \"$total_mib + $memory_usage\" | bc)\n    rm \"${mprof_file}\"\n  done\n\n  average_memory_usage=$(echo \"$memory_usage / $mprof_trials\" | bc -l)\n  echo \"Average MiB consumed for ${filename} with clear_pyc_files=${clear_pyc_files}: $memory_usage MiB\"\n\n}\n\n################################################################################\n\n# Times\n\nuv pip install --no-binary :all: \"rich-click==1.8.0\"\n\nget_times hello_argparse.py true\nget_times hello_click.py true\nget_times hello_rich_click.py true\n\nget_times hello_argparse.py false\nget_times hello_click.py false\nget_times hello_rich_click.py false\n\nuv pip install --no-binary :all: \"rich-click==1.7\"\n\nget_times hello_rich_click.py true\nget_times hello_rich_click.py false\n\n################################################################################\n\n# Memory profiling\n\nuv pip install memory-profiler\nuv pip install --no-binary :all: \"rich-click==1.8.0\"\n\nget_mprof hello_argparse.py true\nget_mprof hello_click.py true\nget_mprof hello_rich_click.py true\n\nget_mprof hello_argparse.py false\nget_mprof hello_click.py false\nget_mprof hello_rich_click.py false\n\nuv pip install --no-binary :all: \"rich-click==1.7\"\n\nget_mprof hello_rich_click.py true\nget_mprof hello_rich_click.py false\n</code></pre> <p>We include Typer in our profiling to show a reasonable baseline for a Click wrapper's overhead. Typer is an ambitious and great project that's doing quite a bit under the hood, and it's reasonable to expect it to take a little more time and memory.</p> <p>Why is rich-click 1.8 more performant? 1.7 left a few free optimizations on the table:</p> <ol> <li>Only import <code>rich</code> when rendering help text.</li> <li>Use <code>click.__version__</code> instead of <code>importlib.metadata.version(\"click\")</code> for Click 7 compat.</li> </ol> <p>For the first change, this meant replacing code like this...:</p> <pre><code>from typing import IO, Optional\n\nfrom rich.console import Console\n\nfrom rich_click.rich_help_configuration import RichHelpConfiguration\n\ndef create_console(config: RichHelpConfiguration, file: Optional[IO[str]] = None) -&gt; Console:\n    console = Console(\n        # ...\n    )\n    return console\n</code></pre> <p>...with code like this...:</p> <pre><code>from typing import TYPE_CHECKING, IO, Optional\n\nfrom rich_click.rich_help_configuration import RichHelpConfiguration\n\nif TYPE_CHECKING:\n    from rich.console import Console\n\ndef create_console(config: RichHelpConfiguration, file: Optional[IO[str]] = None) -&gt; \"Console\":\n    from rich.console import Console\n    console = Console(\n        # ...\n    )\n    return console\n</code></pre> <p>...so that Rich is only loaded when it is needed!</p> <p>Combined, these two changes account for the performance improvements you see.</p> <p>Performance isn't everything; if it was, we'd all be using <code>argparse</code>, or we'd abandon Python altogether for Rust. This is also peanuts in the grand scheme of things. In all likelihood, you've spent more time reading this blog post than the cumulative amount of time you'll save by <code>pip install --upgrade</code>-ing your rich-click 1.7 project. (There are other reasons to upgrade to 1.8 than performance, of course!)</p> <p>So why bother improving rich-click's performance if it's not a big deal? Because we're honored every time someone chooses rich-click for their applications, and we want to pay it back by keeping things as efficient as we reasonably can. Your application is complex and special and all yours. We're excited we get to be a very small part of what you're doing, \ud83e\udef6 and we'll do our best to keep our end of things neat and tidy.</p>"},{"location":"blog/2024/04/30/version-1.8/#and-more","title":"And more...","text":"<p>Under the hood, we've done misc. bugfixes and other small internal improvements+refactors, mostly aimed at composability and customizability for advanced use cases. (This does not impact 99% of users.)</p>"},{"location":"blog/2024/04/30/version-1.8/#plans-for-the-future","title":"Plans for the future","text":"<p>rich-click is not done evolving; 1.8 is just another step on the journey. We already have tons of things planned out for 1.9, which we want to release by the end of 2024.</p> <p>Before we get there, we are going to spend a little bit of time rewriting and reorganizing our unit tests and adding coverage requirements.</p> <p>Thank you once again for using rich-click! \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p>"},{"location":"documentation/accessibility/","title":"Accessibility","text":"<p>This page goes over information relevant to both developers and users relating to accessibility considerations.</p> <p>Accessibility is very important to consider when developing applications. Colorblindness impacts roughly 4% of the general population, meaning that if your application gets even a small user base, there is a high probability that it is being used by someone with colorblindness.</p> <p>Fortunately, there are ways as both developers and users to address these accessibility concerns, as detailed on this page.</p>"},{"location":"documentation/accessibility/#for-users","title":"For users","text":"<p>If you are a user of a rich-click CLI, there are a few options you have to improve accessibility for yourself.</p>"},{"location":"documentation/accessibility/#1-use-the-no_color-environment-variable","title":"1. Use the <code>NO_COLOR</code> environment variable","text":"<p>Rich uses the <code>NO_COLOR</code> standard (more information here), giving rich-click built-in capability to allow the user to suppress color.</p> <p>So, to run any rich-click CLI program without colour, you can do:</p> <pre><code>export NO_COLOR=1  # Set environment variable in shell\npython cli.py      # Run CLI tool\n\n# ... Or run as a single line:\nNO_COLOR=1 python cli.py\n</code></pre> <p>In order to set this environment variable automatically every time you use the terminal, you can add it to your <code>~/.bashrc</code> (if using bash) or <code>~/.zshrc</code> (if using zsh):</p> bashzsh <pre><code>echo \"export NO_COLOR=1\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo \"export NO_COLOR=1\" &gt;&gt; ~/.zshrc\n</code></pre> <p>Tip</p> <p>Note that other programs may also respect <code>NO_COLOR</code>, so it could have other effects!</p>"},{"location":"documentation/accessibility/#2-configure-your-terminals-ansi-color-escape-sequences","title":"2. Configure your terminal's ANSI color escape sequences","text":"<p>The 4-bit ANSI color system is a set of 16 different colors implemented in every terminal. This is the most common way to set colors. These colors are not deterministic; different terminals use slightly different hex values for the ANSI colors. Wikipedia has a full breakdown of all the variations in these colors</p> <p>Nearly all modern terminals have the ability to customize these colors in the terminals' settings. If you are having difficulty distinguishing colors, it is recommended that you adjust these settings.</p> <p>Note</p> <p>This will only work for CLIs that utilize the 4-bit ANSI color system. CLIs that utilize hex values or other color systems will not be impacted by your terminal's ANSI color settings.</p>"},{"location":"documentation/accessibility/#for-developers","title":"For developers","text":"<p>If you would like to make your CLI more accessible for others, there are a few rules of thumb you can follow:</p>"},{"location":"documentation/accessibility/#1-use-rich-features-over-click-features","title":"1. Use Rich features over Click features","text":"<p>There are some Click features that rich-click doesn't override such as print statements and interactive prompts (see Comparison of Click and rich-click).</p> <p>In these cases, we recommend using native Rich functionality so that your end users can benefit from <code>NO_COLOR</code>, which Click does not support.</p> <p>So, for example:</p> <ul> <li><code>Confirm.ask(\"[red]Are you sure?[/]\")</code> is more accessible because it works with <code>NO_COLOR</code>.</li> <li><code>click.confirm(click.echo(\"Are you sure?\", fg=\"red\"))</code> is less accessible because it cannot be overridden by <code>NO_COLOR</code>.</li> </ul>"},{"location":"documentation/accessibility/#2-use-ansi-colors","title":"2. Use ANSI colors","text":"<p>The 4-bit ANSI color system is a set of 16 different colors implemented in effectively every terminal, and they are the most common way to set colors. These colors are not deterministic; different terminals use slightly different hex values for the ANSI colors. Wikipedia has a full breakdown of all the variations in these colors</p> <p>Note</p> <p>rich-click's logo references the ANSI colors! \ud83d\ude01</p> <p>There are 16 total ANSI colors: 8 base ANSI colors, with each one having a \"bright\" variant:</p> <ul> <li><code>black</code>, <code>bright_black</code></li> <li><code>red</code>, <code>bright_red</code></li> <li><code>green</code>, <code>bright_green</code></li> <li><code>yellow</code>, <code>bright_yellow</code></li> <li><code>blue</code>, <code>bright_blue</code></li> <li><code>magenta</code>, <code>bright_magenta</code></li> <li><code>cyan</code>, <code>bright_cyan</code></li> <li><code>white</code>, <code>bright_white</code></li> </ul> <p>Additionally, each one of these can be modified with <code>dim</code>, which in modern terminals just applies a change to the opacity of the color, giving developers a total of 32 different colors that can be shown.</p> <p>Below is a script that renders all of these colors:</p> Code <pre><code># /// script\n# dependencies = [\"rich\"]\n# ///\nfrom rich.console import Console\nfrom rich.box import SIMPLE\nfrom rich.table import Table\n\nconsole = Console(color_system=\"truecolor\")\ntable = Table(title=\"ANSI Colors\", box=SIMPLE)\ncolors = [\"black\", \"red\", \"green\", \"yellow\", \"blue\", \"magenta\", \"cyan\", \"white\"]\ntable.add_column(\"Color\", style=\"bold\")\n\nfor variant in [\"Normal\", \"Dim\", \"Bright\", \"Dim +\\nBright\"]:\n    table.add_column(variant, style=\"bold\")\n\nfor color in colors:\n    table.add_row(\n        color,\n        *[\n            f\"[{style}{color}]\u2593\u2593\u2593\u2593\u2593\u2593[/{style}{color}]\"\n            for style in [\"\", \"dim \", \"bright_\", \"dim bright_\"]\n        ]\n    )\n\nconsole.print(table)\n</code></pre> <p></p> <p>(The colors you see when running this locally will differ from the colors in the image.)</p> <p>The fact that the colors are not deterministic is a benefit for accessibility; it means, for example, a user can customize their terminal so that the ANSI \"red\" is more suitable for them. Nearly every modern terminal allows for this sort of customization.</p> <p>This means that developers looking to create a more accessible experience should prefer ANSI colors.</p> <p>So, for example:</p> <ul> <li><code>RichHelpConfiguration(style_option=\"red\")</code> is more accessible because users can configure the hex value of this red.</li> <li><code>RichHelpConfiguration(style_option=\"#FF0000\")</code> is less accessible because it is not configurable by the end user.</li> </ul>"},{"location":"documentation/comparison_of_click_and_rich_click/","title":"Comparison of Click and rich-click","text":"<p>rich-click is a thin wrapper around Click. The rich-click API is designed to mirror the Click API and intercept some of the calls to slightly different functions.</p> <p>Everything available via <code>import click</code> is also available via <code>import rich_click as click</code>.</p> <p>rich-click is designed to keep the additional API surface introduced on top of Click as lightweight as possible. In other words, rich-click does not introduce many additional concepts not already in Click. If you know Click, you already mostly know rich-click!</p>"},{"location":"documentation/comparison_of_click_and_rich_click/#click-features-that-rich-click-overrides","title":"Click features that rich-click overrides","text":"<p>The only things that rich-click explicitly overrides in the high-level API are the decorators:</p> <ul> <li><code>click.command()</code></li> <li><code>click.group()</code></li> <li><code>click.option()</code> (+ its variants)</li> <li><code>click.argument()</code></li> </ul> <p>The only change to these decorators is that by default, their <code>cls=</code> parameters point to the rich-click implementations.</p> <p>Note</p> <p>There is also a thin wrapper around <code>pass_context()</code> to cast the <code>click.Context</code> type in the function signature to <code>click.RichContext</code> to assist with static type-checking with MyPy. Aside from different typing, there are no substantive changes to the <code>pass_context()</code> decorator.</p>"},{"location":"documentation/comparison_of_click_and_rich_click/#click-features-that-rich-click-does-not-override","title":"Click features that rich-click does not override","text":""},{"location":"documentation/comparison_of_click_and_rich_click/#base-click-command-classes","title":"Base Click command classes","text":"<p>You can still access the base Click classes by their original names:</p> <pre><code>from rich_click import Command, Group, Context\n</code></pre> <p>The above are the same as importing from <code>click</code>.</p> <p>rich-click's subclasses all have the word Rich in front of them!</p> <pre><code>from rich_click import RichCommand, RichGroup, RichContext\n</code></pre>"},{"location":"documentation/comparison_of_click_and_rich_click/#echo-and-interactive-elements","title":"Echo and interactive elements","text":"<p>rich-click deliberately does not enrich certain Click features:</p> <pre><code>click.echo()\nclick.echo_via_pager()\nclick.confirm()\nclick.prompt()\n</code></pre> <p>You are free to use these functions and they are available via <code>import rich_click as click</code>, but Rich's markup will not work with these functions because these functions are just the base Click implementations, without any changes.</p> <p>This is a deliberate decision that we are unlikely to change in the future. We do not want to maintain a more spread-out API surface, and we encourage users to become comfortable using Rich directly; it's a great library and it's worth learning a little bit about it! If you'd like Rich markup for your echos and interactive elements, then you can:</p> Click Function Rich Replacement Rich Documentation <code>click.echo()</code> <code>rich.print()</code> Quick start <code>click.echo_via_pager()</code> <code>rich.Console().pager()</code> Console <code>click.confirm()</code> <code>rich.prompt.Confirm.ask()</code> Prompt <code>click.prompt()</code> <code>rich.prompt.Prompt.ask()</code> Prompt <p>Below is a side-by-side comparison of Click and Rich implementations of echos and interactive elements in rich-click:</p> ClickRich <pre><code>import rich_click as click\n\n@click.command(\"greet\")\ndef greet():\n    name = click.prompt(click.style(\"What is your name?\", fg=\"blue\"))\n\n    if not click.confirm(click.style(\"Are you sure?\", fg=\"blue\")):\n        click.echo(click.style(\"Aborting\", fg=\"red\"))\n        return\n\n    click.echo(click.style(f\"Hello, {name}!\", fg=\"green\"))\n\nif __name__ == \"__main__\":\n    greet()\n</code></pre> <pre><code>import rich_click as click\nimport rich\nfrom rich.prompt import Confirm, Prompt\n\n@click.command(\"greet\")\ndef greet():\n    name = Prompt.ask(\"[blue]What is your name?[/]\")\n\n    if not Confirm.ask(\"[blue]Are you sure?[/]\"):\n        rich.print(\"[red]Aborting[/]\")\n        return\n\n    rich.print(f\"[green]Hello, {name}![/]\")\n\nif __name__ == \"__main__\":\n    greet()\n</code></pre>"},{"location":"documentation/comparison_of_click_and_rich_click/#additional-rich-click-features","title":"Additional rich-click features","text":"<ul> <li>rich-click arguments can be given <code>help=</code> text:     <pre><code>import rich_click as click\n\n@click.command()\n@click.argument(\"src\", help=\"Source location\")\n@click.argument(\"dest\", help=\"Destination location\")\ndef move_item(src, dest):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    ...\n</code></pre></li> <li>rich-click has themes to beautify all CLIs, whether you're an end-user or a CLI developer. More information about this is described in the Themes docs. </li> <li>rich-click help text is formatted using highly configurable option panels and command panels:     <pre><code>import rich_click as click\n\n@click.group()\n@click.option(\"--environment\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.option_panel(\"Config\",\n                    options=[\"--environment\", \"--log-level\"],\n                    help=\"Global runtime configuration\")\n@click.command_panel(\"Admin Commands\",\n                     commands=[\"user\", \"resource\", \"self\"],\n                     help=\"Commands available to administrators\")\ndef cli(environment, log_level):\n    \"\"\"My application\"\"\"\n    ...\n</code></pre>     More information about this is described in the Panels docs.</li> <li>rich-click has a configuration object, <code>RichHelpConfiguration()</code>, that allows for control over how rich-click help text renders, so you are not locked into the defaults. More information about this is described in the Configuration docs.</li> <li>rich-click comes with a CLI tool that allows you to convert regular Click CLIs into rich-click CLIs, and also lets you render your rich-click CLI help text as HTML, SVG, JSON, and trees. More information about this is described in the rich-click CLI docs, or you can run <code>rich-click --help</code> to view the CLI.</li> </ul>"},{"location":"documentation/configuration/","title":"Configuration","text":"<p>There are two methods to configure rich-click:</p> <ul> <li>Decorator: Use the <code>@rich_config()</code> decorator (and <code>RichHelpConfiguration()</code>).</li> <li>Globals: Set the global variables in the <code>rich_config.rich_config</code> module.</li> </ul>"},{"location":"documentation/configuration/#configuration-using-the-rich_config-decorator","title":"Configuration using the <code>rich_config</code> decorator","text":"<p>Initializing a new <code>RichHelpConfiguration</code> object creates a configuration that you can then pass to your CLIs via the <code>rich_config</code> decorator. For example:</p> <pre><code>import rich_click as click\n\n@click.command()\n@click.rich_config(help_config=click.RichHelpConfiguration(style_option=\"bold red\"))\ndef cli():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre> <p><code>RichHelpConfiguration()</code> initializes the default configuration, and the user is able to specify any changes to that default configuration that they'd like. Note that <code>RichHelpConfiguration()</code> is unaware of the global configuration.</p> <p>You may also specify custom config as a dict:</p> <pre><code>import rich_click as click\nfrom rich_click import rich_config\n\n@click.command()\n@rich_config(help_config={\"style_option\": \"bold red\"})\ndef cli():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre> <p>There is a subtle difference between using a <code>dict</code> and using a <code>RichHelpConfiguration</code>. Initializing a <code>RichHelpConfiguration</code> creates a fresh config from the defaults, whereas a <code>dict</code> merges to either the parent or (if the parent config does not exist) the global config.</p> <p>In the below example <code>subcommand</code>'s configuration would get \"merged\" into <code>my_group</code>'s configuration, meaning that <code>subcommand</code> would inherit the <code>style_option=\"bold red\"</code> style from <code>my_group</code>:</p> <pre><code>import rich_click as click\nfrom rich_click import rich_config\n\n@click.group()\n@rich_config(help_config={\"style_option\": \"bold red\"})\ndef my_group():\n    \"\"\"Help text here.\"\"\"\n\n@my_group.command()\n@rich_config(help_config={\"style_argument\": \"bold yellow\"})\ndef subcommand():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre>"},{"location":"documentation/configuration/#configuration-using-the-global-config","title":"Configuration using the global config","text":"<p>The other way to configure rich-click is to use the global configuration inside the <code>rich_click.rich_click</code> module:</p> <pre><code>import rich_click as click\nimport rich_click.rich_click as rc\n\nrc.STYLE_OPTION = \"bold red\"\n\n@click.command()\ndef my_command():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre>"},{"location":"documentation/configuration/#compatibility-between-richhelpconfiguration-and-global-config","title":"Compatibility between <code>RichHelpConfiguration</code> and global config","text":"<p>You can load the global config into a <code>RichHelpConfiguration</code> using the <code>RichHelpConfiguration.load_from_globals()</code> classmethod:</p> <pre><code>import rich_click as click\nimport rich_click.rich_click as rc\n\nrc.STYLE_OPTION = \"bold red\"\n\n# The help config will have `style_option = \"bold red\"`.\nhelp_config = click.RichHelpConfiguration.load_from_globals()\n\n@click.command()\n@click.rich_config(help_config=help_config)\ndef my_command():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre> <p>You can also dump a help config into the global config using <code>RichHelpConfiguration().dump_to_globals()</code>. You probably do not need this in most cases; this is mostly for rich-click's internal use.</p> <pre><code>import rich_click as click\nimport rich_click.rich_click as rc\n\nhelp_config = click.RichHelpConfiguration(style_option=\"bold red\")\nhelp_config.dump_to_globals()\n\n# The CLI will have `style_option = \"bold red\"` since it pulls from the globals.\n@click.command()\ndef my_command():\n    \"\"\"Help text here.\"\"\"\n\ncli()\n</code></pre>"},{"location":"documentation/configuration/#configuration-options","title":"Configuration options","text":"<p>Here is a full list of configuration options:</p> <pre><code># Default styles\nSTYLE_OPTION = \"bold cyan\"\nSTYLE_ARGUMENT = \"bold cyan\"\nSTYLE_COMMAND = \"bold cyan\"\nSTYLE_SWITCH = \"bold green\"\nSTYLE_METAVAR = \"bold yellow\"\nSTYLE_METAVAR_APPEND = \"dim yellow\"\nSTYLE_METAVAR_SEPARATOR = \"dim\"\nSTYLE_HEADER_TEXT = \"\"\nSTYLE_EPILOG_TEXT = \"\"\nSTYLE_FOOTER_TEXT = \"\"\nSTYLE_USAGE = \"yellow\"\nSTYLE_USAGE_COMMAND = \"bold\"\nSTYLE_DEPRECATED = \"red\"\nSTYLE_HELPTEXT_FIRST_LINE = \"\"\nSTYLE_HELPTEXT = \"dim\"\nSTYLE_OPTION_HELP = \"\"\nSTYLE_OPTION_DEFAULT = \"dim\"\nSTYLE_OPTION_ENVVAR = \"dim yellow\"\nSTYLE_REQUIRED_SHORT = \"red\"\nSTYLE_REQUIRED_LONG = \"dim red\"\nSTYLE_OPTIONS_PANEL_BORDER = \"dim\"\nSTYLE_OPTIONS_PANEL_BOX = \"ROUNDED\"\nALIGN_OPTIONS_PANEL = \"left\"\nSTYLE_OPTIONS_TABLE_SHOW_LINES = False\nSTYLE_OPTIONS_TABLE_LEADING = 0\nSTYLE_OPTIONS_TABLE_PAD_EDGE = False\nSTYLE_OPTIONS_TABLE_PADDING = (0, 1)\nSTYLE_OPTIONS_TABLE_BOX = \"\"\nSTYLE_OPTIONS_TABLE_ROW_STYLES = None\nSTYLE_OPTIONS_TABLE_BORDER_STYLE = None\nSTYLE_COMMANDS_PANEL_BORDER = \"dim\"\nSTYLE_COMMANDS_PANEL_BOX = \"ROUNDED\"\nALIGN_COMMANDS_PANEL = \"left\"\nSTYLE_COMMANDS_TABLE_SHOW_LINES = False\nSTYLE_COMMANDS_TABLE_LEADING = 0\nSTYLE_COMMANDS_TABLE_PAD_EDGE = False\nSTYLE_COMMANDS_TABLE_PADDING = (0, 1)\nSTYLE_COMMANDS_TABLE_BOX = \"\"\nSTYLE_COMMANDS_TABLE_ROW_STYLES = None\nSTYLE_COMMANDS_TABLE_BORDER_STYLE = None\nSTYLE_COMMANDS_TABLE_COLUMN_WIDTH_RATIO = (None, None)\nSTYLE_ERRORS_PANEL_BORDER = \"red\"\nSTYLE_ERRORS_PANEL_BOX = \"ROUNDED\"\nALIGN_ERRORS_PANEL = \"left\"\nSTYLE_ERRORS_SUGGESTION = \"dim\"\nSTYLE_ERRORS_SUGGESTION_COMMAND = \"blue\"\nSTYLE_ABORTED = \"red\"\nWIDTH = int(getenv(\"TERMINAL_WIDTH\")) if getenv(\"TERMINAL_WIDTH\") else None\nMAX_WIDTH = int(getenv(\"TERMINAL_WIDTH\")) if getenv(\"TERMINAL_WIDTH\") else WIDTH\nCOLOR_SYSTEM = \"auto\"  # Set to None to disable colors\nFORCE_TERMINAL = True if getenv(\"GITHUB_ACTIONS\") or getenv(\"FORCE_COLOR\") or getenv(\"PY_COLORS\") else None\n\n# Fixed strings\nHEADER_TEXT = None\nFOOTER_TEXT = None\nDEPRECATED_STRING = \"(Deprecated) \"\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nDEPRECATED_WITH_REASON_STRING = \"(Deprecated: {})\"\n=======\nDEPRECATED_WITH_REASON_STRING = \"(Deprecated: {}) \"\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; 0f970aaa8a0098055c374f81a374d0849c90ae24\nDEFAULT_STRING = \"[default: {}]\"\nENVVAR_STRING = \"[env var: {}]\"\nREQUIRED_SHORT_STRING = \"*\"\nREQUIRED_LONG_STRING = \"[required]\"\nRANGE_STRING = \" [{}]\"\nAPPEND_METAVARS_HELP_STRING = \"[{}]\"\nARGUMENTS_PANEL_TITLE = \"Arguments\"\nOPTIONS_PANEL_TITLE = \"Options\"\nCOMMANDS_PANEL_TITLE = \"Commands\"\nERRORS_PANEL_TITLE = \"Error\"\nERRORS_SUGGESTION = None  # Default: Try 'cmd -h' for help. Set to False to disable.\nERRORS_EPILOGUE = None\nABORTED_TEXT = \"Aborted.\"\n\n# Behaviours\nSHOW_ARGUMENTS = False  # Show positional arguments\nSHOW_METAVARS_COLUMN = True  # Show a column with the option metavar (eg. INTEGER)\nAPPEND_METAVARS_HELP = False  # Append metavar (eg. [TEXT]) after the help text\nGROUP_ARGUMENTS_OPTIONS = False  # Show arguments with options instead of in own panel\nOPTION_ENVVAR_FIRST = False  # Show env vars before option help text instead of avert\nTEXT_MARKUP = \"ansi\"  # One of: \"rich\", \"markdown\", \"ansi\", None.\nUSE_MARKDOWN_EMOJI = True  # Parse emoji codes in markdown :smile:\nCOMMAND_GROUPS = {} # Define sorted groups of panels to display subcommands\nOPTION_GROUPS = {} # Define sorted groups of panels to display options and arguments\nUSE_CLICK_SHORT_HELP = False  # Use click's default function to truncate help text\n</code></pre> <p>Full type annotations of these config options are available in <code>src/rich_click/rich_click.py</code>.</p> <p>All of these are available in the <code>RichHelpConfiguration</code> object, but as lowercase.</p>"},{"location":"documentation/configuration/#config-resolution-order-advanced","title":"Config resolution order (advanced)","text":"<p>It probably should not matter for most use cases, but just case it does matter, there is an explicitly defined order of operations for how the configuration gets resolved:</p> <pre><code>flowchart TD\n    A[\"Did you pass in a @rich_config(help_config=...)?\"]\n    A --&gt; |Yes| Ayes\n    A --&gt; |No| Ano\n\n    Ayes[\"Was it a dict or a RichHelpConfiguration?\"]\n\n    Ayes --&gt; |dict| AyesBdict\n    Ayes --&gt; |RichHelpConfiguration| AyesBrhc\n\n    AyesBdict[\"Is there a 'parent' config?\"]\n\n    AyesBdict --&gt; |Yes| AyesBdictCyes\n    AyesBdict --&gt; |No| AyesBdictCno\n\n    AyesBdictCyes:::StoppingPoint\n    AyesBdictCyes[\"Merge into the parent config,\\nand use that\"]\n\n    AyesBdictCno:::StoppingPoint\n    AyesBdictCno[\"Merge into the global config,\\nand use that\"]\n\n    AyesBrhc:::StoppingPoint\n    AyesBrhc[\"Use the RichHelpConfiguration  object.\\n\\n(Note: RichHelpConfiguration's\\ndefaults are independent of the\\nglobal config.)\"]\n\n    Ano[\"Is there a 'parent' config?\"]\n\n    Ano --&gt; |Yes| AnoByes\n    Ano --&gt; |No| AnoBno\n\n    AnoByes:::StoppingPoint\n    AnoByes[\"Use the parent config\"]\n\n    AnoBno:::StoppingPoint\n    AnoBno[\"Use the global config\"]\n\n    classDef StoppingPoint font-weight: 600;</code></pre>"},{"location":"documentation/formatting_and_styles/","title":"Formatting &amp; Styles","text":"<p>Info</p> <p>All images below are auto-generated using another rich side-project: rich-codex. Pretty cool!</p>"},{"location":"documentation/formatting_and_styles/#formatting","title":"Formatting","text":"<p>There are a large number of customization options in rich-click. These can be modified by changing variables in the <code>click.rich_click</code> namespace.</p> <p>Note that most normal click options should still work, such as <code>show_default=True</code>, <code>required=True</code> and <code>hidden=True</code>.</p>"},{"location":"documentation/formatting_and_styles/#text-markup","title":"Text markup","text":"<p>rich-click supports 4 different values for <code>text_markup</code>, which determines how text is rendered:</p> <ul> <li><code>'ansi'</code>: Rendered as plain text with ANSI escape codes handled. This is the default.</li> <li><code>'rich'</code>: Rendered using Rich's markup syntax.</li> <li><code>'markdown'</code>: Rendered with markdown.</li> <li><code>None</code>: Rendered as plain text, ANSI escape codes are not handled.</li> </ul> <p>Warning</p> <p>Prior to rich-click 1.8.0, markup was controlled by the booleans <code>use_rich_markup</code> and <code>use_markdown</code>.</p> <p>These booleans have been silently deprecated (read: they will still be supported for the distant future), and users are encouraged to use the <code>text_markup</code> config option instead.</p> <p>Note that the previous behavior of <code>use_markdown</code> and <code>use_rich_markup</code> was that they are mutually exclusive, and that <code>use_markdown</code> takes precedence over <code>use_rich_markup</code>.</p> <p>Note</p> <p>Don't mix <code>click.style()</code> with <code>text_markup=\"rich\"</code>! If you want colors, bold, italic, and so on, then use Rich markup.</p>"},{"location":"documentation/formatting_and_styles/#rich-markup","title":"Rich markup","text":"<p>In order to be as widely compatible as possible with a simple import, rich-click does not parse rich formatting markup (eg. <code>[red]</code>) by default. You need to opt-in to this behaviour.</p> <p>Remember that you'll need to escape any regular square brackets using a back slash in your help texts, for example: <code>[dim]\\[my-default: foo][\\]</code></p> <p>For more information, read the Rich docs on markup and styles.</p> <code>RichHelpConfiguration()</code>Global config <pre><code>help_config = click.RichHelpConfiguration(text_markup=\"rich\")\n</code></pre> <pre><code>click.rich_click.TEXT_MARKUP = \"rich\"\n</code></pre> <p></p> <p>See <code>examples/04_rich_markup.py</code> for an example.</p>"},{"location":"documentation/formatting_and_styles/#markdown","title":"Markdown","text":"<p>If you prefer, you can use Markdown text.</p> <code>RichHelpConfiguration()</code>Global config <pre><code>help_config = click.RichHelpConfiguration(text_markup=\"markdown\")\n</code></pre> <pre><code>click.rich_click.TEXT_MARKUP = \"markdown\"\n</code></pre> <p></p> <p>See <code>examples/05_markdown.py</code> for an example.</p>"},{"location":"documentation/formatting_and_styles/#positional-arguments","title":"Positional arguments","text":"<p>The default click behaviour is to only show positional arguments in the top usage string, and not in the list below with the options.</p> <p>If you prefer, you can tell rich-click to show arguments with <code>SHOW_ARGUMENTS</code>. By default, they will get their own panel, but you can tell rich-click to bundle them together with <code>GROUP_ARGUMENTS_OPTIONS</code>:</p> <code>RichHelpConfiguration()</code>Global config <pre><code>help_config = click.RichHelpConfiguration(\n    show_arguments=True,\n    group_arguments_options=True\n)\n</code></pre> <pre><code>click.rich_click.SHOW_ARGUMENTS = True\nclick.rich_click.GROUP_ARGUMENTS_OPTIONS = True\n</code></pre> <p></p> <p>See <code>examples/06_arguments.py</code> for an example.</p>"},{"location":"documentation/formatting_and_styles/#metavars-and-option-choices","title":"Metavars and option choices","text":"<p>Metavars are click's way of showing expected input types. For example, if you have an option that must be an integer, the metavar is <code>INTEGER</code>. If you have a choice, the metavar is a list of the possible values.</p> <p>By default, rich-click shows metavars in their own column. However, if you have a long list of choices, this column can be quite wide and result in a lot of white space:</p> <p></p> <p>It may look better to show metavars appended to the help text, instead of in their own column. For this, use the following:</p> <code>RichHelpConfiguration()</code>Global config <pre><code>help_config = click.RichHelpConfiguration(\n    show_metavars_column=False,\n    append_metavars_help=True\n)\n</code></pre> <pre><code>click.rich_click.SHOW_METAVARS_COLUMN = False\nclick.rich_click.APPEND_METAVARS_HELP = True\n</code></pre> <p></p> <p>See <code>examples/08_metavars.py</code> for an example.</p>"},{"location":"documentation/formatting_and_styles/#error-messages","title":"Error messages","text":"<p>By default, rich-click gives some nice formatting to error messages:</p> <p></p> <p>You can customize the Try 'command --help' for help. message with <code>ERRORS_SUGGESTION</code> using rich-click though, and add some text after the error with <code>ERRORS_EPILOGUE</code>.</p> <p>For example, from <code>examples/07_custom_errors.py</code>:</p> <code>RichHelpConfiguration()</code>Global config <pre><code>help_config = click.RichHelpConfiguration(\n    style_errors_suggestion=\"magenta italic\",\n    errors_suggestion=\"Try running the '--help' flag for more information.\",\n    errors_epilogue=\"To find out more, visit [link=https://mytool.com]https://mytool.com[/link]\"\n)\n</code></pre> <pre><code>click.rich_click.STYLE_ERRORS_SUGGESTION = \"magenta italic\"\nclick.rich_click.ERRORS_SUGGESTION = \"Try running the '--help' flag for more information.\"\nclick.rich_click.ERRORS_EPILOGUE = \"To find out more, visit [link=https://mytool.com]https://mytool.com[/link]\"\n</code></pre> <p></p> <p>See <code>examples/07_custom_errors.py</code> for an example.</p>"},{"location":"documentation/formatting_and_styles/#help-width","title":"Help width","text":"<p>The default behaviour of rich-click is to use the full width of the terminal for output. However, if you've carefully crafted your help texts for the default narrow click output, you may find that you now have a lot of whitespace at the side of the panels.</p> <p>To limit the maximum width of the help output, regardless of the terminal size, set <code>WIDTH</code> in characters as follows:</p> <pre><code>click.rich_click.WIDTH = 128\n</code></pre> <p>To still use the full width of the terminal up to a certain limit, set <code>MAX_WIDTH</code> in characters as follows:</p> <pre><code>click.rich_click.MAX_WIDTH = 96\n</code></pre> <p>Setting <code>MAX_WIDTH</code> overrides the effect of <code>WIDTH</code></p>"},{"location":"documentation/formatting_and_styles/#styles","title":"Styles","text":"<p>Success</p> <p>Check out the Live Style Editor to easily get started building a custom rich-click style!</p> <p>Most aspects of rich-click formatting can be customized, from color to alignment.</p> <p>For example, to print the option flags in a different color, you can use:</p> <pre><code>click.rich_click.STYLE_OPTION = \"magenta\"\n</code></pre> <p>To add a blank line between rows of options, you can use:</p> <pre><code>click.rich_click.STYLE_OPTIONS_TABLE_LEADING = 1\nclick.rich_click.STYLE_OPTIONS_TABLE_BOX = \"SIMPLE\"\n</code></pre> <p>You can make some really ~horrible~ colorful solutions using these styles if you wish:</p> <p></p> <p>See <code>examples/10_table_styles.py</code> for an example.</p> <p>See the Configuration options section below for the full list of available options.</p>"},{"location":"documentation/groups_and_sorting/","title":"Groups &amp; Sorting","text":"<p>rich-click gives functionality to list options and subcommands in groups, printed as separate panels. It accepts a list of options / commands which means you can also choose a custom sorting order.</p> <ul> <li>For options / flags, set <code>click.rich_click.OPTION_GROUPS</code></li> <li>For subcommands / Click groups, set <code>click.rich_click.COMMAND_GROUPS</code></li> </ul> <p></p> <p>When grouping subcommands into more than one group (in above example: 'Main usage' and 'Configuration') you may find that the automatically calculated widths of different groups do not line up, due to varying option name lengths.</p> <p>You can avoid this by enforcing the alignment of the help text across groups by setting <code>click.rich_click.STYLE_COMMANDS_TABLE_COLUMN_WIDTH_RATIO = (1, 2)</code>. This results in a fixed ratio of 1:2 for the width of command name and help text column.</p> <p>Info</p> <p>See <code>examples/03_groups_sorting.py</code> for a full example.</p>"},{"location":"documentation/groups_and_sorting/#options","title":"Options","text":"<p>To group option flags into two sections with custom names, see the following example:</p> <pre><code>click.rich_click.OPTION_GROUPS = {\n    \"mytool\": [\n        {\n            \"name\": \"Simple options\",\n            \"options\": [\"--name\", \"--description\", \"--version\", \"--help\"],\n        },\n        {\n            \"name\": \"Advanced options\",\n            \"options\": [\"--force\", \"--yes\", \"--delete\"],\n        },\n    ]\n}\n</code></pre> <p>If you omit <code>name</code> it will use <code>Commands</code> (can be configured with <code>OPTIONS_PANEL_TITLE</code>).</p>"},{"location":"documentation/groups_and_sorting/#commands","title":"Commands","text":"<p>Here we create two groups of commands for the base command of <code>mytool</code>. Any subcommands not listed will automatically be printed in a panel at the end labelled \"Commands\" as usual.</p> <pre><code>click.rich_click.COMMAND_GROUPS = {\n    \"mytool\": [\n        {\n            \"name\": \"Commands for uploading\",\n            \"commands\": [\"sync\", \"upload\"],\n        },\n        {\n            \"name\": \"Download data\",\n            \"commands\": [\"get\", \"fetch\", \"download\"],\n        },\n    ]\n}\n</code></pre> <p>If you omit <code>name</code> it will use <code>Commands</code> (can be configured with <code>COMMANDS_PANEL_TITLE</code>).</p>"},{"location":"documentation/groups_and_sorting/#multiple-commands","title":"Multiple commands","text":"<p>If you use multiple nested subcommands, you can specify their commands using the top-level dictionary keys:</p> <pre><code>click.rich_click.COMMAND_GROUPS = {\n    \"mytool\": [{\"commands\": [\"sync\", \"auth\"]}],\n    \"mytool sync\": [\n        {\n            \"name\": \"Commands for uploading\",\n            \"commands\": [\"sync\", \"upload\"],\n        },\n        {\n            \"name\": \"Download data\",\n            \"commands\": [\"get\", \"fetch\", \"download\"],\n        },\n    ],\n    \"mytool auth\": [{\"commands\": [\"login\", \"logout\"]}],\n}\n</code></pre>"},{"location":"documentation/groups_and_sorting/#wildcard-options","title":"Wildcard options","text":"<p>Instead of defining the group based on the command path, you can use wildcards instead:</p> <pre><code>click.rich_click.COMMAND_GROUPS = {\n    \"*\": [\n        {\n            \"name\": \"Commands for entity management\",\n            \"commands\": [\"user\", \"item\"],\n        }\n    ]\n}\n\nclick.rich_click.OPTION_GROUPS = {\n    \"*\": [\n        {\n            \"name\": \"Simple options\",\n            \"options\": [\"--name\", \"--description\"],\n        },\n    ],\n    # This will match to all subcommands of \"user\", e.g. \"cli user create\" and \"cli user update\".\n    \"cli user *\": [\n        {\n            \"name\": \"Cloud\",\n            \"options\": [\"--region\", \"--env\"],\n        },\n    ],\n    # This will match to things like \"cli user delete\" and \"cli item delete\".\n    \"cli * delete\": [\n        {\n            \"name\": \"Advanced\",\n            \"options\": [\"--force\"],\n        },\n    ],\n}\n</code></pre> <p>This will apply the groups to every subcommand of the command group. If a command or option specified in the wildcard does not exist, then it is ignored. Using the above code as an example, imagine the command <code>cli user describe</code> does not have an option <code>--environment</code>. It would still be safe in that case to map <code>--environment</code> to <code>cli user *</code>; it will just be ignored.</p> <p>If an option is specified for both a wildcard and explicitly named command, then the wildcard is ignored; explicit naming always takes precedence.</p> <p>Warning</p> <p>rich-click does its best to attempt to resolve duplicate options/command definitions, but other than preferring exact matches to wildcards, the exact logic of how duplicates are resolved is subject to revision in upcoming minor version releases. Don't get too clever with duplicating your options/commands!</p> <p>You can disable deduplication (both across and within groups, for both commands and options) by setting <code>\"deduplicate\": False</code>. The below example will show <code>--a</code> three times (two times in Foo, one time in Bar) with deduplication turned off. Without <code>\"deduplicate\": False</code>, the option <code>--a</code> only shows up once.</p> <pre><code>click.rich_click.OPTION_GROUPS = {\n    \"*\": [\n        {\n            \"name\": \"Foo\",\n            \"options\": [\"--a\", \"--a\"],\n            \"deduplicate\": False\n        },\n        {\n            \"name\": \"Bar\",\n            \"options\": [\"--a\", \"--b\"],\n            \"deduplicate\": False\n        },\n    ]\n}\n</code></pre>"},{"location":"documentation/groups_and_sorting/#styling","title":"Styling","text":"<p>Typically, you would style the option / command tables using the global config options. However, if you wish, you may style tables on a per-group basis using the <code>table_styles</code> and <code>panel_styles</code> keys:</p> <pre><code>click.rich_click.COMMAND_GROUPS = {\n    \"mytool\": [\n        {\n            \"commands\": [\"sync\", \"auth\"],\n            \"table_styles\": {\n                \"show_lines\": True,\n                \"row_styles\": [\"magenta\", \"yellow\", \"cyan\", \"green\"],\n                \"border_style\": \"red\",\n                \"box\": \"DOUBLE\",\n            },\n            \"panel_styles\": {\n                \"box\": \"ASCII\",\n            }\n        },\n    ],\n}\n</code></pre> <p>The <code>table_styles</code> dict is pass as kwargs into the inner <code>rich.table.Table()</code>, and <code>panel_styles</code> is passed into the outer <code>rich.panel.Panel()</code>.</p> <p>You can view the respective docstrings of the <code>Table</code> and <code>Panel</code> objects for more information:</p> <ul> <li><code>rich/table.py</code></li> <li><code>rich/panel.py</code></li> </ul>"},{"location":"documentation/groups_and_sorting/#argument-styles","title":"Argument Styles","text":"<p>The panel for positional arguments is a little special.</p> <p>If the following three things are true...:</p> <ol> <li><code>config.show_arguments</code> is <code>True</code>.</li> <li>There is an option group with a <code>name</code> equal to the <code>config.arguments_panel_title</code> (default: <code>'Arguments'</code>)</li> <li>The option group does not have any <code>options</code> (The list is empty, undefined, or <code>None</code>).</li> </ol> <p>... Then this allows you to specify styling options for the <code>Arguments</code> panel separately of other panels.</p> <p>For example, in the below code, the <code>Arguments</code> panel will have a box type of <code>ASCII</code>, independent of the options panel.</p> <pre><code>import rich_click as click\n\nhelp_config = click.RichHelpConfiguration(\n    show_arguments=True,\n    option_groups={\"my-command\": [{\"name\": \"Arguments\", \"panel_styles\": {\"box\": \"ASCII\"}}]}\n)\n\n@click.command\n@click.argument(\"foo\")\n@click.option(\"--bar\")\n@click.rich_config(help_config=help_config)\ndef cli(foo, bar):\n    ...\n</code></pre>"},{"location":"documentation/groups_and_sorting/#usage-notes","title":"Usage notes","text":"<p>Be careful implementing command/option groups with <code>@click.rich_config(help_config=...)</code> in subcommands:     - The groups are not merged to the parent help config.     - It is still required to spell out the whole command as the key, or at least match with a wildcard.</p> <p>For example, the following code works:</p> <pre><code>@click.group(\"my-cli\")\ndef my_cli():\n  ...\n\n# This example uses `\"*my-subcommand\"` to enable it to map to any arbitrarily named parent command.\n@my_cli.command(\"my-subcommand\")\n@click.option(\"--version\")\n@click.rich_config(help_config={\"option_groups\": {\"*my-subcommand\": [{\"name\": \"Version\", \"commands\": [\"--version\"]}]}})\ndef my_subcommand():\n  ...\n</code></pre> <p>However, if you were to only specify <code>\"my-subcommand\"</code></p> <p>Info</p> <p>The reason why specifying option/command groups is like this has to do with rich-click's history. Basically, the <code>@click.rich_config()</code> decorator and <code>RichHelpConfiguration()</code> object were not introduced until version 1.7.0. Prior to that, the only way to define config options was with the global configuration.</p> <p>So, the way that <code>option_groups</code> and <code>command_groups</code> are defined is a relic of rich-click's global configuration. rich-click's maintainers are aware of how awkward it feels, and we'll be introducing a more seamless and natural API in a future release. \ud83d\ude0a</p>"},{"location":"documentation/introduction_to_click/","title":"Introduction to Click","text":"<p>Note</p> <p>If you know what Click is, you can skip this page.</p> <p>rich-click is a drop-in replacement for Click, a Python CLI framework. This means that if you know Click, you already know rich-click.</p> <p>The Click documentation is the appropriate place to learn more advanced things about Click. We are providing a quick overview of Click here to catch users up to speed.</p>"},{"location":"documentation/introduction_to_click/#click-101","title":"Click 101","text":""},{"location":"documentation/introduction_to_click/#commands","title":"Commands","text":"<p>Click utilizes function decorators as its primary interface for composing a CLI.</p> <p>For example, the <code>@click.command</code> decorator creates a <code>Command</code> object that calls the function:</p> <pre><code># docs/code_snippets/introduction_to_click/hello.py\nimport click\n\n@click.command()\ndef hello():\n    \"\"\"Prints 'hello, world!' into the terminal.\"\"\"\n    print(\"Hello, world!\")\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p>You can run the file like normal, or you can run <code>--help</code> to render the function's docstring:</p> <p></p> <p></p>"},{"location":"documentation/introduction_to_click/#arguments-and-options","title":"Arguments and Options","text":"<p>Arguments and options are also added with decorators. The difference between arguments and options is:</p> <ul> <li>Arguments are required, and options are not (unless you specify <code>required=True</code>).</li> <li>Arguments are positional, and options must be prefixed with one or two dashes.</li> </ul> <p>The below code shows some of the features available with options and arguments:</p> <pre><code># docs/code_snippets/introduction_to_click/hello_v2.py\nimport click\n\n@click.command()\n@click.argument(\"name\")\n@click.option(\"--times\", \"-t\",\n              default=1,\n              type=click.INT,\n              show_default=True,\n              help=\"Number of times to print the greeting.\")\n@click.option(\"--say-goodbye\",\n              is_flag=True,\n              default=False,\n              help=\"After saying hello, say goodbye.\")\ndef hello(name, times, say_goodbye):\n    \"\"\"Prints 'hello, [name]!' into the terminal N times.\"\"\"\n    for t in range(times):\n        print(f\"Hello, {name}!\")\n    if say_goodbye:\n        print(\"Goodbye!\")\n\nif __name__ == \"__main__\":\n    hello()\n</code></pre> <p></p> <p></p> <p>Click is able to parse the new arguments and options, e.g. it knows that <code>--times [number]</code> maps to the function argument <code>times</code>. Additionally, Click also knows to render these new arguments in the help text.</p>"},{"location":"documentation/introduction_to_click/#groups","title":"Groups","text":"<p>Last but not least, Click allows for command groups and sub-commands, which allows you to nest commands inside other commands.</p> <pre><code># docs/code_snippets/introduction_to_click/hello_v3.py\nimport click\n\n@click.group(\"greetings\")\ndef greetings_cli():\n    \"\"\"CLI for greetings.\"\"\"\n\n@greetings_cli.command(\"english\")\n@click.argument(\"name\")\ndef english(name):\n    \"\"\"Greet in English\"\"\"\n    print(f\"Hello, {name}!\")\n\n@greetings_cli.command(\"french\")\n@click.argument(\"name\")\ndef french(name):\n    \"\"\"Greet in French\"\"\"\n    print(f\"Bonjour, {name}!\")\n\nif __name__ == \"__main__\":\n    greetings_cli()\n</code></pre> <p>Running <code>python hello.py --help</code> gives you the help text for the group and lists the subcommands:</p> <p></p> <p>And you can run any of the subcommands like so:</p> <p></p> <p></p>"},{"location":"documentation/introduction_to_click/#next-steps","title":"Next Steps","text":"<p>Info</p> <p>There is a lot more to Click than what is covered here. Read the official Click docs for more information.</p> <p>So, what does any of this have to do with rich-click? Simply put: rich-click is a drop-in replacement for Click. Let's take the second CLI example above with the <code>--times</code> option and add rich-click by replacing this:</p> <pre><code>import click\n</code></pre> <p>With this:</p> <pre><code>import rich_click as click\n</code></pre> <p>That's the only change needed to use rich-click! And now we get the following beautiful help text:</p> <p></p>"},{"location":"documentation/introduction_to_click/#other-cli-libraries","title":"Other CLI libraries","text":"<p>Click has been around for over a decade and is the most popular third-party CLI tool in Python. It's popularity is for a good reason: you can do basically anything in Click. Click is very well abstracted, and as a result, you will likely never feel like you are brushing up against the limitations of what Click is capable of.</p> <p>There are other CLI libraries available. Of particular note is Typer, which is itself built on top of Click. Typer is also able to format help messages with Rich, functionality that was adapted from rich-click - as a result, the output looks remarkably similar! However, the two libraries have since drifted apart, so note that not all rich-click functionality is available within Typer.</p> <p>Why Click?</p> <p>If you're interested in why people choose to use Click, check out the Why Click? docs. These are good, but be aware that they were written a really long time ago. The landscape has changed quite a bit since that page was first written.</p>"},{"location":"documentation/panels/","title":"Panels","text":"<p>The containers which contain options and subcommands are called panels:</p> <p></p> <p>By default, <code>RichCommand</code>s have a single panel for options named \"Options\", and <code>RichGroup</code>s have an additional panel for commands named \"Commands\".</p> <p>rich-click allows you to control and customize everything about these panels:</p> <ul> <li>The default panels can be renamed and stylized.</li> <li>Options and commands can be split up across multiple panels.</li> <li>Arguments can be given a separate panel, or included in options panels.</li> <li>The styles of these panels can be modified.</li> </ul> <p>Note</p> <p>Panels are a replacement of \"groups,\" which have been silently deprecated as of version 1.9.0. We will support the old groups API indefinitely, although its use is discouraged. Furthermore, although groups can be combined with panels, we cannot guarantee any behavior such as ordering when these two things are combined.</p> <p>You can read the 1.8 docs to learn more about groups API here.</p>"},{"location":"documentation/panels/#introduction-to-api","title":"Introduction to API","text":"<p>The high-level API for defining panels is with the <code>@click.command_panel()</code> and <code>@click.option_panel()</code> decorators.</p> <p>Under the hood, these decorators create <code>RichPanel</code> objects (<code>RichCommandPanel</code> and <code>RichOptionPanel</code>) that get attached to the command.</p>"},{"location":"documentation/panels/#options","title":"Options","text":"<p>Options panels handle parameters for your command:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.option(\"--src\", help=\"Source\")\n@click.option(\"--dest\", help=\"Destination\")\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.version_option(\"1.2.3\")\n@click.option_panel(\"Main\",\n                    options=[\"--src\", \"--dest\"])\n@click.option_panel(\"Extra\",\n                    options=[\"--env\", \"--log-level\", \"--help\", \"--version\"])\n@click.rich_config({\"style_options_panel_border\": \"dim blue\"})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>You can also specify what options that panels are associated with in the option itself. If the panel is not created in a decorator, then one is created on the fly.</p> <p>The below code generates the same output as the above code:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.option(\"--src\", panel=\"Main\", help=\"Source\")\n@click.option(\"--dest\", panel=\"Main\", help=\"Destination\")\n@click.option(\"--env\", panel=\"Extra\", help=\"Environment\")\n@click.option(\"--log-level\", panel=\"Extra\", help=\"Log level\")\n@click.help_option(panel=\"Extra\")\n@click.version_option(\"1.2.3\", panel=\"Extra\")\n@click.rich_config({\"style_options_panel_border\": \"dim blue\"})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p>Note that this output is the same as the previous example, even though it was defined differently.  </p> <p>RichPanels inherit their base style behaviors from the rich config, although these can be overridden, as we will see in a moment.</p> <p>RichPanels accept additional args other than just the name and objects associated with them.</p> <p>The below code shows how you can use this:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.option(\"--src\", panel=\"Main\")\n@click.option(\"--dest\", panel=\"Main\")\n@click.option(\"--env\", panel=\"Extra\")\n@click.option(\"--log-level\", panel=\"Extra\")\n@click.help_option(panel=\"Extra\")\n@click.version_option(\"1.2.3\", panel=\"Extra\")\n@click.option_panel(\"Main\", table_styles={\"row_styles\": [\"dim on rgb(16,16,32)\", \"on rgb(32,32,72)\"]})\n@click.option_panel(\"Extra\",\n                    help=\"Extra options available to the user:\",\n                    help_style=\"blue\",\n                    panel_styles={\"box\": \"DOUBLE\"},\n                    table_styles={\"row_styles\": [\"dim on rgb(16,16,32)\", \"on rgb(32,32,72)\"], \"caption\": \"Optional\"})\n@click.rich_config({\"style_options_panel_border\": \"dim blue\", \"color_system\": \"truecolor\"})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>The <code>panel_styles</code> is passed into the outer <code>rich.panel.Panel()</code>, and the <code>table_styles</code> dict is pass as kwargs into the inner <code>rich.table.Table()</code>.</p> <p>You can view the respective docstrings of the <code>Table</code> and <code>Panel</code> objects for more information:</p> <ul> <li><code>rich/table.py</code></li> <li><code>rich/panel.py</code></li> </ul>"},{"location":"documentation/panels/#arguments","title":"Arguments","text":"<p>Despite the name, options panels handle more than just options; they can also handle arguments.</p> <p>Arguments can be given their own panel with the <code>show_arguments</code> config option:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.argument(\"src\")\n@click.argument(\"dest\")\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.rich_config({\"show_arguments\": True})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>Arguments can also be included in the options panel with the <code>group_arguments_options</code> config option (the <code>show_arguments</code> config option does not need to be set).</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.argument(\"src\")\n@click.argument(\"dest\")\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.rich_config({\"group_arguments_options\": True})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>In rich-click, unlike base Click, arguments can have <code>help</code> text. If <code>help=</code> if set for arguments, then the argument panel is shown:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.argument(\"src\", help=\"Source\")\n@click.argument(\"dest\", help=\"Destination\")\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>Arguments can also be given their own panels, or combined with other panels.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.argument(\"src\", panel=\"Required Args\")\n@click.argument(\"dest\", panel=\"Required Args\")\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.option_panel(\"Required Args\",\n                    panel_styles={\"border_style\": \"dim red\"})\n@click.option_panel(\"Options\")\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p>"},{"location":"documentation/panels/#commands","title":"Commands","text":"<p>Sub-commands also have panels that are defined similarly to option panels:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.group()\n@click.command_panel(\"Items\",\n                     commands=[\"move-item\", \"update-item\"])\n@click.command_panel(\"Users\",\n                     commands=[\"create-user\", \"update-user\"],\n                     help=\"User management commands\")\ndef cli():\n    \"\"\"CLI\"\"\"\n    pass\n\n@cli.command()\ndef move_item():\n    \"\"\"Move an item\"\"\"\n    pass\n\n@cli.command()\ndef update_item():\n    \"\"\"Update an item\"\"\"\n    pass\n\n@cli.command()\ndef create_user():\n    \"\"\"Create a user\"\"\"\n    pass\n\n@cli.command()\ndef update_user():\n    \"\"\"Update a user\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> Example <p> </p> <p>Unlike options panels, where a <code>@click.option()</code> can assign itself to a panel, you cannot define assignment to a command panel from <code>@click.RichGroup.command()</code>; you must explicitly set inside the Command Panel itself.</p>"},{"location":"documentation/panels/#overriding-defaults","title":"Overriding defaults","text":"<p>Default panel titles can be overridden with the config. Renamed panels can still have their panel-level configurations modified.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.group()\n@click.option(\"--env\", help=\"Environment\")\n@click.option(\"--log-level\", help=\"Log level\")\n@click.option_panel(\"Additional Options\",\n                    panel_styles={\"border_style\": \"dim blue\"})\n@click.command_panel(\"Subcommands\",\n                     panel_styles={\"border_style\": \"dim magenta\"})\n@click.rich_config({\n    \"arguments_panel_title\": \"Required Args\",\n    \"options_panel_title\": \"Additional Options\",\n    \"commands_panel_title\": \"Subcommands\",\n    \"show_arguments\": True\n})\ndef cli(env, log_level):\n    \"\"\"My CLI\"\"\"\n\n@cli.command()\n@click.argument(\"src\")\n@click.argument(\"dest\")\ndef move_item(src, dest):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> Example <p> </p> <p>Note that the rich config passes to subcommands, but panels are defined at the command level. So running <code>move-item --help</code> from the above example will rename the children's panels (because that's set in the parent's config), but it does not pass the <code>panel_styles=</code> to the subcommand:</p> Example <p> </p> <p>Default panel styles are also handled by the config, and will be overridden when conflicting options are defined at the panel level.</p> <p>In the below example, <code>Main</code> does not have any styles set, but <code>Extra</code> has the border style overridden. However, defaults are overridden on an arg-by-arg basis, so the config level <code>box</code> is not overridden. The below example also overrides the title text style using <code>title_style=</code>.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.argument(\"src\", help=\"Source\", panel=\"Main\")\n@click.argument(\"dest\", help=\"Destination\", panel=\"Main\")\n@click.option(\"--env\", help=\"Environment\", panel=\"Extra\")\n@click.option(\"--log-level\", help=\"Log level\", panel=\"Extra\")\n@click.help_option(panel=\"Extra\")\n@click.version_option(\"1.2.3\", panel=\"Extra\")\n@click.option_panel(\"Main\", title_style=\"u b\")\n@click.option_panel(\"Extra\",\n                    panel_styles={\"border_style\": \"blue\"},\n                    title_style=\"u b\")\n@click.rich_config({\n    \"style_options_panel_border\": \"bright_red\",\n    \"style_options_panel_box\": \"SIMPLE\",\n    \"style_option\": \"\",\n    \"style_argument\": \"bright_red\",\n    \"style_usage\": \"\",\n    \"style_metavar\": \"dim\"\n})\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p>"},{"location":"documentation/panels/#tips","title":"Tips","text":"<p>There are a few things to keep in mind when using RichPanels.</p>"},{"location":"documentation/panels/#handling-help-option","title":"Handling <code>--help</code> option","text":"<p>The help option is associated with the default options panel.</p> <p>If you define all the panels, the <code>--help</code> option will be left straggling in the default panel.</p> <p>This is probably a mistake, and there are two ways to fix it:</p> MistakeFix (method 1)Fix (method 2) <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n# The --help option will just be in its own panel at the top.\n# This is probably not what is intended!\n@click.command()\n@click.option(\"--src\", panel=\"Main\")\n@click.option(\"--dest\", panel=\"Main\")\n@click.option(\"--env\", panel=\"Extra\")\n@click.option(\"--log-level\", panel=\"Extra\")\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n# Explicitly define the panels and place --help in Extra:\n@click.command()\n@click.option(\"--src\", panel=\"Main\")\n@click.option(\"--dest\", panel=\"Main\")\n@click.option(\"--env\", panel=\"Extra\")\n@click.option(\"--log-level\", panel=\"Extra\")\n@click.option_panel(\"Main\")\n@click.option_panel(\"Extra\", options=[\"--env\", \"--log-level\", \"--help\"])\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n# Explicitly define the help_option() and set its panel.\n@click.command()\n@click.option(\"--src\", panel=\"Main\")\n@click.option(\"--dest\", panel=\"Main\")\n@click.option(\"--env\", panel=\"Extra\")\n@click.option(\"--log-level\", panel=\"Extra\")\n@click.help_option(panel=\"Extra\")\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p>"},{"location":"documentation/panels/#sort-order-of-panels","title":"Sort order of panels","text":"<p>Panels are printed in the order that they are defined, from top to bottom.</p> <p>If panels are inferred from <code>@click.option(panel=...)</code>, rather than defined by <code>@click.option_panel()</code>, then they are defined in the order that they appear in parameters from top to bottom.</p> <p>This means that the simplest way to control the order panels is to define them explicitly!</p> <p>This also means that you can order options panels to come before command panels, and vice-versa, based on the decorator order.</p> <p>By default, unless explicitly ordered otherwise, command panels always come after options panels.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n# This will explicitly set commands to be above options\n# Merely defining the command panel or option panel alone will not do this.\n# They both must be defined, and then commands must be set above options.\n@click.group()\n@click.command_panel(\"Commands\")\n@click.option_panel(\"Options\")\ndef cli():\n    \"\"\"CLI help text\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> Example <p> </p> <p>There exists a config option <code>commands_before_options</code> (default <code>False</code>), which changes the default behavior so that commands come before options. When explicitly defining panels of multiple types with decorators (i.e. both option panels and command panels), this config option is ignored. So for example, the below code will set options above commands:</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n# Even though `commands_before_options` is True,\n# the panel order is being explicitly defined by the decorators,\n# and thus the `commands_before_options` config option is ignored.\n@click.group()\n@click.option_panel(\"Options\")\n@click.command_panel(\"Commands\")\n@click.rich_config({\"commands_before_options\": True})\ndef cli():\n    \"\"\"CLI help text\"\"\"\n    pass\n\n@cli.command()\ndef subcommand():\n    \"\"\"Subcommand help text\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre> Example <p> </p> <p>If you do not explicitly define panels, then the sort order behavior is more advanced. The sort order in all situations is deliberate and also thoroughly tested, but it's not worth going into detail about. In short, if you want to have full control over panel sorting, then you should define each panel!</p>"},{"location":"documentation/panels/#ordering-of-rows-within-panels","title":"Ordering of rows within panels","text":"<p>The easiest way to control the order of elements within a panel is to explicitly define the order within the panel itself.</p> <p>If you are having trouble with ordering things, set the order within <code>options=</code> or <code>commands=</code>.</p> <p>Additionally, it is suggested you set every object you intend on including in the panel.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.command()\n@click.option(\"--src\", panel=\"Main\")\n@click.option(\"--dest\", panel=\"Main\")\n@click.option(\"--env\")\n@click.option(\"--log-level\")\n@click.option_panel(\"Extra\", options=[\"env\", \"log_level\", \"help\"])\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p> <p>That said, the default behavior is also predictable and follows what base Click does for ordering:</p> <ul> <li>Arguments + options are presented in the order they occur in the decorators, from top to bottom.</li> <li>Subcommands are alphanumerically sorted.</li> </ul>"},{"location":"documentation/panels/#advanced-custom-richpanel-classes","title":"(Advanced) Custom RichPanel Classes","text":"<p>Warning</p> <p>The <code>RichPanel</code> API may be unstable across minor versions, since it is a new concept that we are still trying to find the best API for. If you subclass <code>RichPanel</code>, you may want to pin your rich-click version to <code>rich-click&gt;=1.9,&lt;1.10</code>.</p> <p>RichPanels can be subclassed for additional functionality, if you so choose:</p> <pre><code>import rich_click as click\n\n# This is not the best example since you could also\n# set panel_styles={\"title_align\": \"center\"} without subclassing.\n\nclass CustomOptionPanel(click.RichOptionPanel):\n\n    def render(self, command, ctx, formatter):\n        panel = super().render(command, ctx, formatter)\n        panel.title_align = \"center\"\n        return panel\n\n@click.command()\n@click.argument(\"src\")\n@click.argument(\"dest\")\n@click.option(\"--env\")\n@click.option(\"--log-level\")\n@click.option_panel(\"Arguments\", cls=CustomOptionPanel)\n@click.option_panel(\"Options\", cls=CustomOptionPanel)\n@click.rich_config()\ndef move_item(src, dest, env, log_level):\n    \"\"\"Move an item from a src location to a dest location\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    move_item()\n</code></pre> Example <p> </p>"},{"location":"documentation/rich_click_cli/","title":"<code>rich-click</code> CLI tool","text":""},{"location":"documentation/rich_click_cli/#overview","title":"Overview","text":"<p>rich-click comes with a CLI tool that allows you to format the Click help output for any CLI that uses Click.</p> <p></p> <p>To use, simply prefix <code>rich-click</code> to the command. Here are a few real world examples:</p> <code>flask</code><code>celery</code><code>dagster</code> <p></p> <p></p> <p></p> <p>If the CLI is not installed as a script, you can also pass the location with: <code>&lt;module_name&gt;:&lt;click_command_name&gt;</code>.</p> <p>For example, if you have a file located at <code>path/to/my/cli.py</code>, and the Click <code>Command</code> object is named <code>main</code>, then you can run: <code>rich-click path.to.my.cli:main</code>.</p> <p>Warning</p> <p>If you are experiencing any unexpected issues with the <code>rich-click</code> CLI, first make sure you are not calling your command on load of the module.</p> <p>For example, the following could cause a strange <code>No such option: --output</code> error when attempting to run <code>rich-click --output html my_cli:cli</code>:</p> <pre><code>import rich_click as click\n\n@click.command(\"my-cli\")\n@click.argument(\"x\")\ndef cli(x):\n    ...\n\ncli()\n</code></pre> <p>To make it so <code>rich-click --output html</code> works on the above code, add a <code>if __name__ == \"__main__\":</code></p> <pre><code>import rich_click as click\n\n@click.command(\"my-cli\")\n@click.argument(\"x\")\ndef cli(x):\n    ...\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre>"},{"location":"documentation/rich_click_cli/#render-help-text-as-html-or-svg","title":"Render help text as HTML or SVG","text":"<p>You can also use <code>rich-click --output=html [command]</code> to render rich HTML for help text, or <code>rich-click --output=svg [command]</code> to generate an SVG.</p> <p>This works for RichCommands as well as normal click Commands.</p> <p>SVG example:</p> <p></p> <p>HTML example:</p> <p></p> <p>SVG and HTML generated from <code>docs/code_snippets/rich_click_cli/app.py</code></p>"},{"location":"documentation/rich_click_cli/#notes-on-how-the-rich-click-cli-works","title":"Notes on how the <code>rich-click</code> CLI works","text":"<p>Note</p> <p>The rest of this document contains technical details most users will not need to know.</p> <p>Under the hood, the <code>rich-click</code> CLI is patching the <code>click</code> module, and replacing the Click decorators and <code>click.Command</code>, <code>click.Group</code>, etc. objects with their equivalent rich-click versions.</p> <p>Sometimes, a subclassed <code>click.Command</code> will overwrite one of these methods:</p> <ul> <li><code>click.Command.format_usage</code></li> <li><code>click.Command.format_help_text</code></li> <li><code>click.Command.format_options</code></li> <li><code>click.MultiCommand.format_commands</code></li> <li><code>click.Command.format_epilog</code></li> </ul> <p>Patching Click internals can mess with method resolution order, since by the time the downstream library subclasses the <code>click.Command</code>, it will be a <code>RichCommand</code>, and the subclass's method will take precedence over the <code>RichCommand</code>'s methods. The problem is that rich-click's methods can be incompatible or at least stylistically incongruous with the base Click help text rendering.</p> <p>To solve this, <code>rich-click</code> checks whether a method comes from a \"true\" <code>RichCommand</code> subclass or if it just looks that way due to patching. If <code>RichCommand</code> is \"properly\" subclassed, the override is allowed. If the subclass is only a result of the patching operation, we ignore the aforementioned methods and use the rich-click implementation.</p> <p>Long story short, the <code>rich-click</code> CLI is safe to subclassing when it is the user's intent to subclass a rich-click object. (This is so that you can use other nifty features of the CLI such as the <code>--output</code> option on your own rich-click CLIs) That said, custom, non-rich-click implementations are ignored.</p>"},{"location":"documentation/rich_click_cli/#using-patch-as-an-end-user","title":"Using <code>patch()</code> as an end user","text":"<p>The functionality that <code>rich-click</code> uses to patch Click internals is available for use by rich-click end users, and it occasionally comes in handy outside of the <code>rich-click</code> CLI.</p> <p>In some situations, you might be registering a command from another Click CLI that does not use rich-click:</p> <pre><code>import rich_click as click\nfrom some_library import another_cli\n\n@click.group(\"my-cli\")\ndef cli():\n    pass\n\n# `another_cli` will NOT have rich-click markup. :(\ncli.add_command(another_cli)\n</code></pre> <p>In this situation, <code>another_cli</code> retains its original help text behavior. In order to make <code>another_cli</code> work with rich-click, you need to patch <code>click</code> before you import <code>another_cli</code>. You can patch Click with <code>rich_click.patch.patch</code> like this:</p> <pre><code>import rich_click as click\nfrom rich_click.patch import patch\n\npatch()\n\nfrom some_library import another_cli  # noqa: E402\n\n@click.group(\"my-cli\")\ndef cli():\n    pass\n\n# `another_cli` will have rich-click markup. :)\ncli.add_command(another_cli)\n</code></pre>"},{"location":"documentation/themes/","title":"Themes","text":"<p>Themes are a simple way to customize the style of CLI help text as both an end-user and as a developer. Themes are one of rich-click's most powerful features.</p> <code>quartz-modern</code><code>nord-nu</code><code>cargo-slim</code><code>forest-robo</code> <pre><code>export RICH_CLICK_THEME=quartz-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <pre><code>export RICH_CLICK_THEME=nord-nu\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <pre><code>export RICH_CLICK_THEME=cargo-slim\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <pre><code>export RICH_CLICK_THEME=forest-robo\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Themes consist of Color Palettes and Formats, which can be mixed and matched. The name of a full theme has the following schema: <code>{color_palette}-{format}</code>.</p> <p>For example, the forest-slim theme uses the forest color palette and the slim format.</p> Code for <code>cli.py</code> <p>The following CLI code is used throughout this module to show off themes.</p> <pre><code># /// script\n# dependencies = [\"rich-click&gt;=1.9.0dev1\"]\n# ///\nimport rich_click as click\n\n@click.group(\"app\", epilog=\"For more assistance, visit https://example.com/\")\n@click.option(\"--environment\", \"-e\",\n              type=click.Choice([\"dev\", \"staging\", \"prod\"]),\n              help=\"Environment to run in\",\n              required=True,\n              envvar=\"APP_ENV\",\n              show_envvar=True)\n@click.option(\"--env-file\",\n              type=click.Path(),\n              help=\".env file\")\n@click.option(\"--retries\", \"-r\",\n              type=click.IntRange(min=0, max=10),\n              help=\"Num retries for failed tasks\")\n@click.option(\"--vcpu\", \"-c\",\n              type=click.IntRange(min=1, max=32),\n              default=4,\n              show_default=True,\n              help=\"Num vCPUs\")\n@click.option(\"--memory\", \"-m\",\n              type=click.IntRange(min=1, max=32),\n              default=4,\n              show_default=True,\n              hidden=True,\n              help=\"Memory (this is hidden)\")\n@click.option(\"--log-level\", \"-l\",\n              type=click.Choice([\"debug\", \"info\", \"warning\", \"error\"]),\n              default=\"info\",\n              show_default=True,\n              help=\"Log level\",\n              envvar=\"APP_LOG_LEVEL\",\n              show_envvar=True)\n@click.option(\"--colors/--no-colors\", \"-C/-n\",\n              default=True,\n              show_default=True,\n              help=\"Whether to show colors in logs\")\n@click.option(\"--log-format\",\n              type=click.Choice([\"json\", \"text\"]),\n              show_choices=False,\n              deprecated=True,\n              help=\"Log format\")\n@click.option(\"--quiet/--no-quiet\", \"-q\",\n              deprecated=\"use --log-level instead\",\n              help=\"Print text\")\n@click.help_option(\"--help\", \"-h\")\n@click.version_option(\"1.2.3\", \"--version\", \"-v\")\n@click.option_panel(\"Runtime options\",\n                    options=[\"environment\", \"env_file\", \"retries\", \"vcpu\"],\n                    help=\"Options specifying the runtime\")\n@click.option_panel(\"Logging options\",\n                    options=[\"log_level\", \"colors\", \"log_format\", \"quiet\"],\n                    help=\"Logging config options\")\n@click.option_panel(\"Misc. options\", options=[\"--version\", \"--help\"])\n@click.command_panel(\"Commands\", help=\"All subcommands\")\ndef cli(*args, **kwargs):\n    \"\"\"\n    CLI for app\n\n    This is a production-ready application.\n    \"\"\"\n\n@cli.command(\"db\")\ndef db():\n    \"\"\"Database commands for app\"\"\"\n\n@cli.command(\"deploy\")\ndef deploy():\n    \"\"\"Deploy app\"\"\"\n\n@cli.command(\"admin\")\ndef admin():\n    \"\"\"Administrative commands\"\"\"\n\n@cli.command(\"self\", deprecated=\"Use admin commands\")\ndef self():\n    \"\"\"Manage app\"\"\"\n\n@cli.command(\"user\", hidden=True)\ndef user():\n    \"\"\"User commands (This is hidden)\"\"\"\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre>"},{"location":"documentation/themes/#themes-as-an-end-user","title":"Themes as an end-user","text":"<p>Unless a developer specifies otherwise, every rich-click CLI can have a theme applied by an end-user by setting the <code>RICH_CLICK_THEME</code> env var.</p> <p>If you'd like to set a global theme, add the following to your shell's config file (replacing <code>star-modern</code> with whatever theme you desire):</p> bashzsh <pre><code>echo \"export RICH_CLICK_THEME=star-modern\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>echo \"export NO_COLOR=1\" &gt;&gt; ~/.zshrc\n</code></pre> <p>Themes will also be used when you wrap a base Click CLI in the <code>rich-click</code> CLI, e.g.:</p> Commanduv command <pre><code>export RICH_CLICK_THEME=star-modern\nrich-click flask --help\n</code></pre> <pre><code>export RICH_CLICK_THEME=star-modern\nuv run --with=flask --with=rich-click \\\n    rich-click flask --help\n</code></pre> <p></p> <p>Alternatively, when using the <code>rich-click [cmd]</code> CLI, you can pass a theme via the <code>--theme</code>/<code>-t</code> option:</p> Commanduv command <pre><code>rich-click -t star-slim flask --help\n</code></pre> <pre><code>uv run --with=flask --with=rich-click \\\n    rich-click --theme=star-slim flask --help\n</code></pre> <p></p> <p>The <code>RICH_CLICK_THEME</code> env var can also be a full JSON representation of a config. For example, let's say you prefer having commands above options. There is a config option for this, <code>commands_before_options</code>, and you can place that in the <code>RICH_CLICK_THEME</code> env var:</p> Commanduv command <pre><code>export RICH_CLICK_THEME='{\"commands_before_options\": true, \"theme\": \"red1-nu\"}'\nrich-click flask --help\n</code></pre> <pre><code>export RICH_CLICK_THEME='{\"commands_before_options\": true, \"theme\": \"red1-nu\"}'\nuv run --with=flask --with=rich-click \\\n    rich-click flask --help\n</code></pre> <p></p>"},{"location":"documentation/themes/#themes-as-a-developer","title":"Themes as a developer","text":"<p>You can set a theme for your CLI by setting it in the config:</p> <code>{}</code><code>RichHelpConfiguration()</code>Global config <pre><code>import rich_click as click\n\n@click.group(\"cli\")\n@click.rich_config({\"theme\": \"nord-slim\"})\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <pre><code>import rich_click as click\n\n@click.group(\"cli\")\n@click.rich_config(click.RichHelpConfiguration(theme=\"nord-slim\"))\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <pre><code>import rich_click as click\n\nclick.rich_click.THEME = \"nord-slim\"\n\n@click.group(\"cli\")\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <p>By default, a theme can still be overridden by a user. For CLIs which are already highly customized, this may cause unintended stylistic consequences. You can disable overrides with the <code>enable_theme_env_var</code> option:</p> <code>{}</code><code>RichHelpConfiguration()</code>Global config <pre><code>import rich_click as click\n\n@click.group(\"cli\")\n@click.rich_config({\"theme\": \"nord-slim\", \"enable_theme_env_var\": False})\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <pre><code>import rich_click as click\n\n@click.group(\"cli\")\n@click.rich_config(click.RichHelpConfiguration(theme=\"nord-slim\", enable_theme_env_var=False))\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <pre><code>import rich_click as click\n\nclick.rich_click.THEME = \"nord-slim\"\nclick.rich_click.ENABLE_THEME_ENV_VAR = False\n\n@click.group(\"cli\")\ndef cli():\n    \"\"\"My CLI help text\"\"\"\n</code></pre> <p>Note that themes never override existing config options; they are essentially the defaults for a config, so explicitly set options always take precedence over a theme. For more information on config resolution order, read the Configuration docs.</p>"},{"location":"documentation/themes/#all-themes","title":"All themes","text":""},{"location":"documentation/themes/#formats","title":"Formats","text":"<p>There are currently 5 available formats.</p> <code>box</code><code>slim</code><code>modern</code><code>robo</code><code>nu</code> <p>(Default) Original rich-click format with boxes.</p> <p> </p> <p>Simple, classic, no-fuss CLI format.</p> <p> </p> <p>Beautiful modern look.</p> <p> </p> <p>Spacious with sharp corners.</p> <p> </p> <p>Great balance of compactness, legibility, and style.</p> <p> </p>"},{"location":"documentation/themes/#color-palettes","title":"Color palettes","text":"<p>There are currently over a dozen different color palettes.</p> <p>All color palettes use ANSI colors, meaning they will render differently on each terminal.</p>"},{"location":"documentation/themes/#multi-colored-palettes","title":"Multi-colored palettes","text":"<code>default</code><code>solarized</code><code>nord</code><code>star</code><code>quartz</code><code>quartz2</code><code>cargo</code><code>forest</code><code>dracula</code><code>dracula2</code> <p>Default Original rich-click colors.</p> <pre><code>export RICH_CLICK_THEME=default-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p></p> <p>Bright, colorful, vibrant accents.</p> <pre><code>export RICH_CLICK_THEME=solarized-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Many shades of cool colors.</p> <pre><code>export RICH_CLICK_THEME=nord-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Litestar theme; royal feel.</p> <pre><code>export RICH_CLICK_THEME=star-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Dark and radiant.</p> <pre><code>export RICH_CLICK_THEME=quartz-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Remix of 'quartz' with accents.</p> <pre><code>export RICH_CLICK_THEME=quartz2-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Cargo CLI theme; legible and bold.</p> <pre><code>export RICH_CLICK_THEME=cargo-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Earthy tones with analogous colors.</p> <pre><code>export RICH_CLICK_THEME=forest-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Vibrant high-contract dark theme.</p> <pre><code>export RICH_CLICK_THEME=dracula-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Dracula theme with forced black background.</p> <pre><code>export RICH_CLICK_THEME=dracula2-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p>"},{"location":"documentation/themes/#simple-palettes","title":"Simple palettes","text":"<p>The following palettes all focus on just a single color.</p> <p>The below palettes are presented with the <code>modern</code> format.</p> <code>red1</code><code>red2</code><code>green1</code><code>green2</code><code>yellow1</code><code>yellow2</code><code>blue1</code><code>blue2</code><code>magenta1</code><code>magenta2</code><code>cyan1</code><code>cyan2</code> <p>Simple theme with red accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=red1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with red accents on object names.</p> <pre><code>export RICH_CLICK_THEME=red2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with green accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=green1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with green accents on object names.</p> <pre><code>export RICH_CLICK_THEME=green2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with yellow accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=yellow1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with yellow accents on object names.</p> <pre><code>export RICH_CLICK_THEME=yellow2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with blue accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=blue1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with blue accents on object names.</p> <pre><code>export RICH_CLICK_THEME=blue2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with magenta accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=magenta1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with magenta accents on object names.</p> <pre><code>export RICH_CLICK_THEME=magenta2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with cyan accents on section headers.</p> <pre><code>export RICH_CLICK_THEME=cyan1-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>Simple theme with cyan accents on object names.</p> <pre><code>export RICH_CLICK_THEME=cyan2-modern\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p>"},{"location":"documentation/themes/#monochromatic-palettes","title":"Monochromatic palettes","text":"<p>The following palettes have zero color.</p> <code>mono</code><code>plain</code> <p>Monochromatic theme with no colors.</p> <pre><code>export RICH_CLICK_THEME=mono-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <p>No style at all.</p> <pre><code>export RICH_CLICK_THEME=plain-box\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p> <code>plain-slim</code> <p>Of course, the most plain style of them all is <code>plain-slim</code>, which renders CLI help text in the most conventional way that rich-click can.</p> <p>For fun, we've included it here!</p> <p>(Or, maybe you really dislike rich-click's styles and you want to add <code>export RICH_CLICK_THEME=plain-slim</code> to your <code>.zshrc</code>. We won't judge!)</p> <pre><code>export RICH_CLICK_THEME=plain-slim\npython docs/code_snippets/themes/cli.py --help\n</code></pre> <p> </p>"},{"location":"documentation/themes/#list-all-themes-in-command-line","title":"List all themes in command line","text":"<p>Running <code>rich-click --themes</code> will provide help text that lists every theme available to you. The command will also tell you which theme you currently have enabled.</p> Output of <code>rich-click --themes</code> <p> </p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/miscellaneous/","title":"Miscellaneous","text":""},{"location":"blog/category/release-notes/","title":"Release notes","text":""}]}